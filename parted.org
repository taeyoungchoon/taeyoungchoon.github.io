* How to modify the partition table to GPT when newly installing the RHEL 7,8? 

- https://access.redhat.com/solutions/2210981

** TODO for system using legacy bios

- inst.gpt at the end of the vmlinux line

** for system using uefi with bios

- inst.gpt at the end of the linxuefi line

* one-liner samples

#+BEGIN_SRC 
parted --script /dev/sdb mklabel gpt mkpart primary 0% 100% set 1 lvm on 
#+END_SRC

#+BEGIN_SRC 
parted /dev/sda unit MiB print
expr 30727 + 1024
parted --script /dev/sda mkpart primary 30727MiB 30751MiB set 3 lvm on 
parted --script /dev/sda mkpart primary 30751MiB 31775MiB set 4 lvm on 
parted --script /dev/sda mkpart primary 31775MiB 32799MiB set 5 lvm on 
parted --script /dev/sda mkpart primary 31775MiB 32799MiB set 6 lvm on 
parted /dev/sda unit MiB print
#+END_SRC

* DONE one-liner and working

#+begin_src bash
  #!/usr/bin/env bash

  function helper {
      echo 'syntax: cmd sdb'
      exit 1
  }

  [[ -n $1 ]] && target=$1 || helper

  function cleaner {
      parted --script /dev/$target rm 1 print
  }

  function partner {
      size=$(parted --script /dev/sdb unit MiB print | grep MiB | awk '{ print $3 }' | sed 's/MiB//')
      end=$((size -1))
      cmd="parted --script /dev/$target unit MiB mklabel gpt mkpart data 0% ${end}MiB print"
      eval $cmd
  }

  cleaner
  partner

  #---
  #parted --script /dev/sdb rm 1 print
  #parted --script /dev/sdb unit MiB print
  #parted --script /dev/sdb unit MiB mklabel gpt mkpart data 0% 279964MiB print
#+end_src

* parition table called msdos

- primary
- extended
- logical

* partition table called gpt

- primary * 128, enough

* with lvm

#+BEGIN_SRC 
set 1 lvm on
#+END_SRC

* mkpart list

- mkpart part-type name fs-type start end
- msdos 
  - cli
    #+BEGIN_SRC 
    unit MiB
    mkpart primary 1MiB 3MiB
    #+END_SRC
- gpt
  - cli
    #+BEGIN_SRC 
    unit MiB
    mkpart 1MiB 3MiB
    #+END_SRC

* unit

- s
- B
- KiB
- MiB
- GiB

* mkpart

#+begin_src bash
  parted --script /dev/vdb \
  unit GiB \
  mklabel gpt \
  mkpart app       0       1GiB \
  mkpart ora_redo  1GiB    2GiB \
  mkpart ora_undo  2GiB    3GiB \
  mkpart data_temp 3GiB    4GiB \
  mkpart ora_data  4GiB    5GiB \
  mkpart data_pump 5GiB    6GiB \
  print

#+end_src
* mkpart with kickstart

#+begin_src bash
  parted --script /dev/sda \
  unit MiB \
  mklabel gpt \
  mkpart boot       0      750MiB \
  mkpart boot_efi   750MiB 250MiB \
  print
  
#+end_src

* rm

#+begin_src bash
  parted --script /dev/vdb \
  unit GiB \
  mklabel gpt \
  rm 1 \
  rm 2 \
  rm 3 \
  rm 4 \
  rm 5 \
  rm 6 \
  print
  
#+end_src

* post

#+begin_src bash
  parted /dev/vdb print
  for p in /dev/vdb[0-9]; do echo $p; mkfs.ext4 $p; done
  parted /dev/vdb print
  blkid | grep vdb
  blkid /dev/vdb1

  [root@localhost ~]# blkid  | grep vdb | sort
  /dev/vdb1: UUID="fefc6392-3288-47c1-9377-21a02cb0cac4" TYPE="ext4" 
  /dev/vdb2: UUID="508c5a8b-cad5-42ac-85d6-ba46ff425d62" TYPE="ext4" 
  /dev/vdb3: UUID="6c362d67-e8d3-4b2e-b29e-27e4076c5920" TYPE="ext4" 
  /dev/vdb4: UUID="f3c826ea-ec88-4060-bba5-ce344e3484b1" TYPE="ext4" 
  /dev/vdb5: UUID="70a9282e-ec65-40a8-b675-9a3a762956ea" TYPE="ext4" 
  /dev/vdb6: UUID="20630bb1-3719-4f4e-abc2-b0f645a0e6d3" TYPE="ext4" 

  [root@localhost ~]# blkid /dev/vdb1
  /dev/vdb1: UUID="fefc6392-3288-47c1-9377-21a02cb0cac4" TYPE="ext4" 
  [root@localhost ~]# 
  
#+end_src

* logos

#+begin_src bash
  vdb1 /oracle/app
  vdb2 /oracle/ora_redo

  blkid /dev/vdb1
  uuid
  UUID="uuid" /oracle/app ext4 defaults 1 2
  
#+end_src

* code

#+begin_src bash
  import subprocess

  device="/dev/vdb1"
  proc = subprocess.Popen(['blkid', '-o', 'value', device], stdout=subprocess.PIPE)
  out, err = proc.communicate()
  uuid=out.split()[0]

  mount="/oracle/app"
  print("UUID=%s %s ext4 defaults 1 2" % (uuid, mount))

#+end_src
* data

#+begin_src bash
  d = { '/dev/vdb1': '/oracle/app',
	'/dev/vdb2': '/oracle/ora_redo' }
  
#+end_src

* loop with dic/kv

#+begin_src bash
  for k in d:
    print(d.get(k))
  
#+end_src

* combine

#+begin_src bash
  import subprocess

  d = { '/dev/vdb1': '/oracle/app',
	'/dev/vdb2': '/oracle/ora_redo' }

  for k in d:
    device = k
    mount = d.get(k)
    proc = subprocess.Popen(['blkid', '-o', 'value', device], stdout=subprocess.PIPE)
    out, err = proc.communicate()
    uuid=out.split()[0]
    print("UUID=%s %s ext4 defaults 1 2" % (uuid, mount))

  ,* func

  def fstab(device, mount):
    proc = subprocess.Popen(['blkid', '-o', 'value', device], stdout=subprocess.PIPE)
    out, err = proc.communicate()
    uuid=out.split()[0]
    print("UUID=%s %s ext4 defaults 1 2" % (uuid, mount))
  
#+end_src

* refactor

#+begin_src bash
  import subprocess

  d = { '/dev/vdb1': '/oracle/app',
	'/dev/vdb2': '/oracle/ora_redo' }

  def fstab(device, mount):
    proc = subprocess.Popen(['blkid', '-o', 'value', device], stdout=subprocess.PIPE)
    out, err = proc.communicate()
    uuid=out.split()[0]
    print("UUID=%s %s ext4 defaults 1 2" % (uuid, mount))

  for k in d:
    device = k
    mount = d.get(k)
    fstab(device, mount)
  
#+end_src
