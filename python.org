* TODO parts

- [ ] with emacs
  1. [ ] sth?
  2. C-c C-c
- [X] with org mode
  - C-c '
- [X] emacs with tmux
  1. tmux
  2. C-b %
  3. emacs foo.py
  4. C-b o
  5. while true; do python3 foo.py; sleep 3; done
- [X] ipython
- [X] if
- [X] for
- [ ] re
- [X] list
- [ ] hash
- [ ] arg
- [ ] print

* TODO if

#+BEGIN_SRC python :results output
if True:
    print(True)
elif False:
    print(False)
else:
    print(None)
#+END_SRC

#+RESULTS:
: True

* TODO list comprehension

#+begin_src python :results output
lt1 = [x for x in range(3)]
lt2 = [x for x in range(3) if x > 0]
print(lt1, lt2, sep="\n")
#print(lt2)
#+end_src

#+RESULTS:
: [0, 1, 2]
: [1, 2]

* TODO functional(map, filter)
* DONE lambda
CLOSED: [2024-03-02 Sat 22:06]

#+begin_src python :results output
f = lambda a, b : a + b
print(f(1, 2))
#+end_src

#+RESULTS:
: 3

* DONE print with format
CLOSED: [2024-03-02 Sat 22:30]

#+begin_src python :results output
hello, name, num = "hi", "jack", 10000
print("%s, %s with legend" % (hello, name))
print("{0}, {1} with format".format(hello, name))
print(f"{hello}, {name} with f-string")
num = 10000
print(f"{num:,}")
#+end_src

#+RESULTS:
: hi, jack with legend
: hi, jack with format
: hi, jack with f-string
: 10,000

* DONE for
CLOSED: [2024-03-02 Sat 22:37]

#+BEGIN_SRC python :results output
for i in range(0, 2):
    for j in range(0, 2):
        print(i, j)
#+END_SRC

#+RESULTS:
: 0 0
: 0 1
: 1 0
: 1 1

* DONE list

- append

#+BEGIN_SRC python :results output
  lt = [1, 2, 3, 4]
  lt.append(5)
  print(lt)
#+END_SRC

#+RESULTS:
: [1, 2, 3, 4, 5]

* DONE math
CLOSED: [2024-03-02 Sat 22:37]

#+begin_src python :results output
import math
print(round(math.pi, 2))
#+end_src

#+RESULTS:
: 3.14

* DONE help

#+begin_src python
  lt = [1, 2, 3]
  type(lt)
  dir(lt)
  lt.reverse()
  help(lt.reverse)
  help(lt.sort)
  lt.sort()
  len(lt)
#+end_src

* DONE os

#+begin_src python
  import os
  import re

  with open('t3','w') as f:
      pass

  for i in dir(os):
      if re.search('re', i):
	  print(i)
        
  help(os.rename)

  os.stat('t3')
  os.rename('t3', 't4')
  os.listdir()
#+end_src

* DONE re

#+begin_src python
  import re

  re.search('foo', 'bar')
  re.search('foo', 'foobar')
  dir(re)
  help(re.search)
  re.match('foo', 'foobar')
  re.split(':', 'a:b:c')
  re.findall('a+', 'a_aa_aaa')
  #sub
  help(re.sub)
  line = 'a_aa_aaa then ab_aab_aaab'
  re.sub('aa+', 'X', line)
#+end_src

* DONE about file, open, read, write

#+begin_src python
  import os

  os.listdir()
  with open('see','w') as f:
      pass

  with open('see','a') as f:
      f.write('first')
      f.write('second')
      f.write('third')

  with open('see','a') as f:
      f.write('\n')
      f.write('first\n')
      f.write('second\n')
      f.write('third\n')

  with open('see') as f:
      stuff = f.read()
      print(stuff)
#+end_src

* DONE def func
CLOSED: [2024-03-01 Fri 16:38]

#+BEGIN_SRC python
  def say(word):
      return word

  if __name__ == "__main__":
      output = say('hi')
      print(output)

#+END_SRC

#+RESULTS:
: None

* DONE class
CLOSED: [2024-03-01 Fri 15:52]

#+BEGIN_SRC python
  class dog:
      name = ""
      age = ""
      def getName(self):
	  return self.name
      def setName(self, name):
	  self.name = name

  big_dog = dog()
  big_dog.setName("joe")
  big_dog.getName()
#+END_SRC

#+begin_src python
class Host:
    def __init__(self, machine, role):
        self.machine = machine
        self.role = role
        self.age = 0
        self.power = []
#+end_src

#+begin_src python
class NetworkDevice:

    def __init__(self):
        self.name: str

nd1 = NetworkDevice()
nd1.name = "arista1.t.com"
print(f"the name is {nd1.name}")
#+end_src

#+RESULTS:
: None

* TODO rest api

- import requests
- json, hash and template inside string

* DONE json
CLOSED: [2024-03-02 Sat 22:38]

- import json
- json.dumps
- json.loads
- json.tool

#+begin_src python
  import json

  jd = {1:2, 3:4}
  json.dumps(jd)
  json.loads(json.dumps(jd))

  help(json.dumps)
  help(json.loads)
  help(json.load)
  help(json.dump)

  json.dump(jd, open('jd.json', 'w'))
  with open('jd.json') as f:
      print(f.read())

  with open('jd.json') as f:
      print(json.load(f))
#+end_src

* TODO yaml
* TODO template inside string

- from string import Template
- with json, template then

* DONE process
  
** subprocess

- https://docs.python.org/3/library/subprocess.html
- https://docs.python.org/3.3/library/subprocess.html

- [X] check_output
- [X] getoutput
- [X] getstatusoutput
- [X] run
- [ ] popen, Popen
- [ ] communicate
- [ ] os.system
- [ ] os.spawn
  

#+begin_src python
  import subprocess as sp

  dir(sp)

  # getoutput 
  sp.getoutput('uname -a')
  # getstatusoutput > tuple, (status, output)
  sp.getstatusoutput('uname -a')
  # check_output 
  sp.check_output(['uname ', '-a'])
  sp.check_output('uanme -a', shell=True)
  # run > instance
  sp.run(['uname', '-a'], capture_output=True, text=True)
  sp.run('uname -a', capture_output=True, text=True, shell=True)

  result = sp.run("uname -a", capture_output=True, shell=True, text=True)
  if result.returncode == 0:
      print(result.stdout)

  result = sp.run("uname -x", capture_output=True, shell=True, text=True)
  if result.returncode == 0:
      print(result.stdout)
  else:
      print(result.stderr)
  #+end_src

* DONE arg with sys.argv

#+begin_src python
  import sys

  def help():
      print("require argument")
      sys.exit(1)

  if len(sys.argv) == 1:
      help()

  opt = sys.argv[1]
  print("do with {}".format(opt))
#+end_src

#+RESULTS:

* TODO argparse later on
* TODO def

#+begin_src python :results output
def summy(a, b):
    return a + b

print(summy(1, 2))
#+end_src

#+RESULTS:
: 3

* TODO range

#+begin_src python :results output
for i in range(1, 10):
    if i % 2 == 0:
        print(i)
#+end_src

#+RESULTS:
: 2
: 4
: 6
: 8

* TODO input

#+begin_src python
value = input("input num : ")
#+end_src

#+RESULTS:

* DONE re
CLOSED: [2024-03-02 Sat 22:38]

#+begin_src python :results output
import re

line = "this is the line"
match = re.search('the', line)
print(match.group(0))
#+end_src

#+RESULTS:
: the

#+begin_src python :results output
import re

line = "this-is-the"
lt = line.split('-')
print(lt)
#+end_src

#+RESULTS:
: ['this', 'is', 'the']

* TODO exception

#+begin_src python :results output
try:
    if int(value) == int:        
        pass
except:
    pass
#+end_src

#+RESULTS:

* DONE dictionary

#+begin_src python
  d = {1:2, 3:4}
  print("{} {} {}".format(d[1], d.get(1), d.get(2)))
#+end_src

#+RESULTS:
: None

* TODO generator, yield, lazy

#+begin_src python
  [x for x in range(0, 3)]
  g = (x for x in range(0, 3))
  next(g)
  next(g)
  next(g)
  next(g)
#+end_src

* DONE dunder method, double under
CLOSED: [2024-03-02 Sat 00:01]

#+begin_src python :results output
class Vector:

    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __add__(self, other):
        return Vector(self.x + other.x, self.y + other.y)

    def __repr__(self):
        return f"{self.x} x {self.y}"
    
v1 = Vector(10, 20)
v2 = Vector(50, 60)

try:
    v3 = v1 + v2
except Exception as e:
    print(e)

print(v3)

#+end_src

#+RESULTS:
: 60 x 80
* TODO decorator

** class decorator

#+begin_src python :results output
  class Person:
    name: str
    age: int

  p = Person()
  p.name = 'joe'
  p.age = 32
  print(p.name, p.age)
#+end_src

#+RESULTS:
: joe 32

#+begin_src python :results output
  from dataclasses import dataclass

  @dataclass
  class Person:
    name: str
    age: int

  p = Person('meg', 34)
  print(p)
#+end_src

#+RESULTS:
: Person(name='meg', age=34)

** function decorator

#+begin_src python :results output
def pre_decor(function):

    def auth():
        print("auth called")
        function()

    return auth

def hello_world():
    print("hello, world")

pre_decor(hello_world)()
#+end_src

#+RESULTS:
: auth called
: hello, world

#+begin_src python :results output
def pre_decor(function):

    def auth():
        print("auth called")
        function()

    return auth

@pre_decor
def hello_world():
    print("hello, world")

hello_world()
#+end_src

#+RESULTS:
: auth called
: hello, world

#+begin_src python :results output
def pre_decor(function):

    def auth(*args, **kwargs):
        print("auth called")
        value = function(*args, **kwargs)
        return value
    
    return auth

@pre_decor
def hello_world(person):
    print(f"hello, {person}")

hello_world("jack")
#+end_src

#+RESULTS:
: auth called
: hello, jack

#+begin_src python :results output
def logger(func):
    def wrapper(*args, **kwargs):
        value = func(*args, **kwargs)
        with open('log.out', 'a+') as f:
            fname = func.__name__
            print(f"{fname} turn v as {value}")
            f.write(f"{fname} turn v as {value}\n")
        return value

    return wrapper

@logger
def add(x, y):
    return x + y

print(add(10, 20))
#+end_src

#+RESULTS:
: add turn v as 30
: 30
