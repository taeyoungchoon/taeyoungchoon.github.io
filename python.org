* TODO parts

- [ ] with emacs
  1. [ ] sth?
  2. C-c C-c
- [X] with org mode
  - C-c '
- [X] emacs with tmux
  1. tmux
  2. C-b %
  3. emacs foo.py
  4. C-b o
  5. while true; do python3 foo.py; sleep 3; done
- [X] ipython
- [X] if
  #+BEGIN_SRC python
    if True:
	print(True)
  #+END_SRC
- [X] for
  #+BEGIN_SRC python
    for i in range(3):
	for j in range(3):
	    print(i, j)
  #+END_SRC
- [ ] re
- [X] list
  #+BEGIN_SRC python
    lt = [1, 2, 3]
    print(lt)
  #+END_SRC
- [ ] hash
- [ ] arg
- [X] math
  #+BEGIN_SRC python
    import math
    math.pi
  #+END_SRC
- print
  
* DONE help

#+begin_src python
  lt = [1, 2, 3]
  type(lt)
  dir(lt)
  lt.reverse()
  help(lt.reverse)
  help(lt.sort)
  lt.sort()
  len(lt)
#+end_src

* DONE os

#+begin_src python
  import os
  import re

  with open('t3','w') as f:
      pass

  for i in dir(os):
      if re.search('re', i):
	  print(i)
        
  help(os.rename)

  os.stat('t3')
  os.rename('t3', 't4')
  os.listdir()
#+end_src

* DONE re

#+begin_src python
  import re

  re.search('foo', 'bar')
  re.search('foo', 'foobar')
  dir(re)
  help(re.search)
  re.match('foo', 'foobar')
  re.split(':', 'a:b:c')
  re.findall('a+', 'a_aa_aaa')
  #sub
  help(re.sub)
  line = 'a_aa_aaa then ab_aab_aaab'
  re.sub('aa+', 'X', line)
#+end_src

* DONE about file, open, read, write

#+begin_src python
  import os

  os.listdir()
  with open('see','w') as f:
      pass

  with open('see','a') as f:
      f.write('first')
      f.write('second')
      f.write('third')

  with open('see','a') as f:
      f.write('\n')
      f.write('first\n')
      f.write('second\n')
      f.write('third\n')

  with open('see') as f:
      stuff = f.read()
      print(stuff)
#+end_src

* DONE def func
CLOSED: [2024-03-01 Fri 16:38]

#+BEGIN_SRC python
  def say(word):
      return word

  if __name__ == "__main__":
      output = say('hi')
      print(output)

#+END_SRC

#+RESULTS:
: None

* DONE class
CLOSED: [2024-03-01 Fri 15:52]

#+BEGIN_SRC python
  class dog:
      name = ""
      age = ""
      def getName(self):
	  return self.name
      def setName(self, name):
	  self.name = name

  big_dog = dog()
  big_dog.setName("joe")
  big_dog.getName()
#+END_SRC

* TODO rest api

- import requests
- json, hash and template inside string

* TODO json

- import json
- json.dumps
- json.loads
- json.tool

#+begin_src python
  import json

  jd = {1:2, 3:4}
  json.dumps(jd)
  json.loads(json.dumps(jd))

  help(json.dumps)
  help(json.loads)
  help(json.load)
  help(json.dump)

  json.dump(jd, open('jd.json', 'w'))
  with open('jd.json') as f:
      print(f.read())

  with open('jd.json') as f:
      print(json.load(f))
#+end_src
  
* TODO yaml
* TODO template inside string

- from string import Template
- with json, template then

* DONE process
  
** subprocess

- https://docs.python.org/3/library/subprocess.html
- https://docs.python.org/3.3/library/subprocess.html

- [X] check_output
- [X] getoutput
- [X] getstatusoutput
- [X] run
- [ ] popen, Popen
- [ ] communicate
- [ ] os.system
- [ ] os.spawn
  

#+begin_src python
  import subprocess as sp

  dir(sp)

  # getoutput 
  sp.getoutput('uname -a')
  # getstatusoutput > tuple, (status, output)
  sp.getstatusoutput('uname -a')
  # check_output 
  sp.check_output(['uname ', '-a'])
  sp.check_output('uanme -a', shell=True)
  # run > instance
  sp.run(['uname', '-a'], capture_output=True, text=True)
  sp.run('uname -a', capture_output=True, text=True, shell=True)

  result = sp.run("uname -a", capture_output=True, shell=True, text=True)
  if result.returncode == 0:
      print(result.stdout)

  result = sp.run("uname -x", capture_output=True, shell=True, text=True)
  if result.returncode == 0:
      print(result.stdout)
  else:
      print(result.stderr)
  #+end_src

* DONE arg with sys.argv

#+begin_src python
  import sys

  def help():
      print("require argument")
      sys.exit(1)

  if len(sys.argv) == 1:
      help()

  opt = sys.argv[1]
  print("do with {}".format(opt))
#+end_src

#+RESULTS:

* TODO argparse later on
* DONE dictionary

#+begin_src python
  d = {1:2, 3:4}
  print("{} {} {}".format(d[1], d.get(1), d.get(2)))
#+end_src

#+RESULTS:
: None

* TODO generator, yield, lazy

#+begin_src python
  [x for x in range(0, 3)]
  g = (x for x in range(0, 3))
  next(g)
  next(g)
  next(g)
  next(g)
#+end_src

* TODO decorator

#+begin_src python
  class Person:
    name: str
    age: int

  p = Person()
  p.name = 'joe'
  p.age = 32
#+end_src

#+begin_src python
  from dataclasses import dataclass

  @dataclass
  class Person:
    name: str
    age: int

  p = Person('meg', 34)
#+end_src


