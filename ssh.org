* TODO option: -t

- Force pseudo-terminal allocation.  
- This can be used to execute arbitrary screen-based programs on a remote machine, 
- [ ] which can be very useful, e.g. when implementing menu services. (ex. sudo uptime)
- Multiple -t options force tty allocation, even if ssh has no local tty.

#+BEGIN_SRC 
ssh -t
#+END_SRC

* key

| key     | say                                        |
|---------+--------------------------------------------|
| rsa     | secure enough so ssh-keygen -t rsa -b 2048 |
| dsa     | disabled on OpenSSH 7.0                    |
| ecdsa   | compatibility headaches no more            |
| ed25519 | compatibility headaches no more            |

* note about ssh

- telnet alternative
- being secure

* config

- StrictHostKeyChecking no

* config about slow login

comment below at sshd_config

#+BEGIN_SRC 
GSSAPIAuthentication yes
GSSAPIDelegateCredentials no
#+END_SRC

** GSSAPI

- Generic Security Services Application Program Interface
- GSS-API
- The dominant GSSAPI mechanism implementation in use is Kerberos. 
  Unlike the GSSAPI, the Kerberos API has not been standardized and various existing implementations use incompatible APIs. 
  The GSSAPI allows Kerberos implementations to be API compatible.
- July 1991: IETF Common Authentication Technology (CAT) Working Group meets in Atlanta, led by John Linn
- October 1997: SASL published, includes GSSAPI mechanism
  - APP:SASL:GSSAPI:Kerberos
- May 2006: Secure Shell use of GSSAPI standardised
  - SSH:GSSAPI:Kerberos

* files

- ~/.ssh/config
- ~/.ssh/known_hosts
- ~/.ssh/known_hosts2
- ~/.ssh/authorized_keys
- ~/.ssh/authorized_keys2
- $HOME/.ssh/id_rsa
- $HOME/.ssh/id_rsa.pub
- $HOME/.ssh/id_dsa
- $HOME/.ssh/id_dsa.pub

* ssh-keygen -R hostname
* ssh -i ~/.ssh/id_rsa user@target
* ssh-copy-id user@target

#+BEGIN_EXAMPLE
$ cat ~/.ssh/id_rsa.pub | ssh user@192.168.0.100 "mkdir -p ~/.ssh && cat >>  ~/.ssh/authorized_keys"
#+END_EXAMPLE

#+BEGIN_EXAMPLE
$ scp ~/.ssh/id_dsa.pub user@192.168.0.100:.ssh/id_dsa.pub
#+END_EXAMPLE

* TODO ssh-agent

eval $(ssh-agent)
eval `ssh-agent`

exec ssh-agent $SHELL

ssh-add ~/.ssh/id_rsa

ssh-add -l
