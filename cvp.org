* TODO what is

- https://www.arista.com/assets/data/pdf/Whitepapers/CloudVision_WP.pdf

* TODO f > studio

- provisioning > studios

* TODO api, the interface about f

- studio
- metric

* TODO list of something

- https://github.com/aristanetworks/openmgmt
- https://github.com/aristanetworks/EosSdk

* TODO rac(RESTful API Client), cvprac

- outside to cvp
- https://github.com/aristanetworks/cvprac
- https://github.com/aristanetworks/go-cvprac
- https://arista.my.site.com/AristaCommunity/s/question/0D52I00007ERqFKSA1/rest-api-client

* TODO eapi, Arista EOS command API, eAPI

- from outside and to the eos as e means
- https://buildmedia.readthedocs.org/media/pdf/pyeapi/latest/pyeapi.pdf
- https://github.com/aristanetworks/goeapi
- https://saidvandeklundert.net/2019-08-06-arista-eapi-using-pyeapi/
- https://www.arista.com/assets/data/pdf/Whitepapers/Arista_eAPI_FINAL.pdf

* TODO netops

- https://www.youtube.com/watch?v=DCotdzo7LPI
- https://www.youtube.com/watch?v=0idTsBB_9h4
- http://www.howfunky.com/2021/09/arista-open-source-network-automation.html
- https://www.bitsinflight.com/arista-networks-nfd26/
- [ ] https://www.youtube.com/watch?v=nzFeUN_eR94

* DONE studio using 'arista cloudvision python library'

- inside job
- https://github.com/aristanetworks/cloudvision-python
  - with ctx
    #+BEGIN_SRC bash
      ? pwd
      ~/cloudvision-python-trunk/cloudvision-python-trunk/cloudvision/cvlib
      ? ls -l context.py
      -rw-r--r-- 1 jack 197121 30335 May 19 14:08 context.py
      ?
    #+END_SRC

- [ ] https://aristanetworks.github.io/cloudvision-apis/rpcs/

#+BEGIN_SRC 
from cloudvision.Connector.grpc_client import GRPCClient, create_query
import cloudvision.cvlib as cvlib
import ipaddress
import re
import time
from collections import Counter, OrderedDict
import tagsearch_python.tagsearch_pb2_grpc as tsgr
import tagsearch_python.tagsearch_pb2 as tspb
from arista.tag.v2.tag_pb2 import TagKey, \
    TagAssignmentKey
from arista.tag.v2.services import TagConfigServiceStub, \
    TagAssignmentConfigServiceStub, \
    TagConfigSetRequest, \
    TagAssignmentConfigSetRequest
#+END_SRC 

* DONE get_token.py

- https://github.com/aristanetworks/cloudvision-python/tree/trunk/examples

#+BEGIN_SRC 
  558  sudo pip3 install cvprac
  561  sudo pip3 install arista
  568  sudo pip3 install networking-arista
  575  sudo pip3 install cloudvision
#+END_SRC

#+BEGIN_SRC 
  507  wget https://raw.githubusercontent.com/aristanetworks/cloudvision-python/trunk/examples/get_token.py
  555  wget https://raw.githubusercontent.com/aristanetworks/cloudvision-python/trunk/examples/resources/event/get_events.py
#+END_SRC

#+BEGIN_SRC 
? pip install requests
? python get_token.py --server cvp1.t.com --username cvpadmin --password 1234qwer -ssl &>/dev/null
? ls
cvp.crt  get_events.py  get_token.py  token.txt
#+END_SRC

- https://pypi.org/project/cvprac/
- https://pypi.org/project/cloudvision
- https://arista.my.site.com/AristaCommunity/s/article/Understanding-CloudVIsion-APIs-and-accessing-NetDB-data

* DONE get_events.py

#+BEGIN_SRC 
? pip install wheel
? pip install grpcio
? pip install cloudvision
? python3 get_events.py --server cvp1.t.com --token-file token.txt --cert-file cvp.crt
selecting events that match the filter partial_eq_filter {
}

value {
  key {
    key {
      value: "5473c5eb9c6556b"
    }
    timestamp {
      seconds: 1679970676
      nanos: 608912553
    }
  }
#+END_SRC

* DONE get_versions.py

#+BEGIN_SRC 
wget https://raw.githubusercontent.com/aristanetworks/cloudvision-python/trunk/examples/resources/inventory/get_versions.py
#+END_SRC

#+BEGIN_SRC 
? python3 get_versions.py --server cvp1.t.com --token-file token.txt --cert-file cvp.crt
Hostname                 EOS Version

arista1                  4.27.5M
#+END_SRC

* DONE lookup_device.py

#+BEGIN_SRC 
wget https://raw.githubusercontent.com/aristanetworks/cloudvision-python/trunk/examples/resources/inventory/lookup_device.py
#+END_SRC

#+BEGIN_SRC 
? python3 lookup_device.py --server cvp1.t.com --token-file token.txt --cert-file cvp.crt --hostname arista1
value {
  software_version {
    value: "4.27.5M"
  }
  hostname {
    value: "arista1"
  }
  domain_name {
  }
#+END_SRC

* DONE example_utility.py

#+BEGIN_SRC 
 wget https://raw.githubusercontent.com/aristanetworks/cloudvision-python/trunk/examples/resources/inventory/example_utility.py
#+END_SRC

#+BEGIN_SRC
? python3 example_utility.py --server cvp1.t.com --token-file token.txt --cert-file cvp.crt --inactive | grep Leaf | sort
Leaf3                    64D3D5201301F4D4A22A805958EC4B68
Leaf4                    7C1DAD1BD37725FB0914A9503280603C
Leaf5                    1284FF4684184FD2D66BD3FDBF110D32
Leaf6                    DA73DA847166A7297FDFD736F06F2D81
?
#+END_SRC
* TODO Connector rel

- https://github.com/aristanetworks/cloudvision-python/tree/trunk/examples/Connector
#+BEGIN_SRC 
  612  wget https://raw.githubusercontent.com/aristanetworks/cloudvision-python/trunk/examples/Connector/parser.py
  613  wget https://raw.githubusercontent.com/aristanetworks/cloudvision-python/trunk/examples/Connector/utils.py
  614  wget https://raw.githubusercontent.com/aristanetworks/cloudvision-python/trunk/examples/Connector/get_intf_status.py
#+END_SRC

#+BEGIN_SRC 
? python3 get_intf_status.py --apiserver cvp1.t.com --auth=token,token.txt,cvp.crt --deviceId JPE14073114 | grep linkUp
Ethernet10               linkUp
Management1              linkUp
#+END_SRC
* TODO cvplibrary at configlet

- https://www.arista.com/en/cg-cv/cv-creating-configlets

#+BEGIN_SRC 
[root@cvp1 cvpi]# grep -r cvplibrary *
apps/cvp/logs/cvp-backend/catalina.out:[Loaded cvplibrary.CVPGlobalVariables from file:/usr/local/tomcat/work/Catalina/localhost/cvpservice/eclipse/plugins/com.arista.cvp.services.pythonExecutor-1.0.0-SNAPSHOT.jar]
pythonlab/Lib/ssl.py:            from cvplibrary import CVPCertPathHolder as pathHolder
pythonlab/Lib/jsonrpclib/SSLCertificate.py:#Read the isDCAEnabled from cvplibrary
pythonlab/Lib/jsonrpclib/SSLCertificate.py:from cvplibrary import CVPCertPathHolder
resources/initData.json:                  "data": "import os\r\nimport cvp\r\nfrom cvplibrary import Form, CVPGlobalVariables, GlobalVariableNames\r\n\r\ndef terminAttrCertEnabled():\r\n   ''' Returns True if TerminAttr cert is enabled.\r\n    Otherwise returns False.\r\n    '''\r\n   server = cvp.Cvp( os.environ.get( 'CURRENT_NODE_IP', '127.0.0.1' ) )\r\n   sid = CVPGlobalVariables.getValue( GlobalVariableNames.CVP_SESSION_ID )\r\n   server.sessionIs( sid )\r\n   return server.getTerminattrCertEnable()\r\n\r\ndef getIngestAuth( ingestKey ):\r\n   ''' Returns the ingest auth option string.\r\n   '''\r\n   ingestAuth = 'key,' + ingestKey\r\n   if terminAttrCertEnabled():\r\n      ingestAuth = 'token,/tmp/token'\r\n   return ingestAuth\r\n\r\n# Using the CVP device interface for receiving telemetry data\r\nip_list = [ os.environ.get('PRIMARY_DEVICE_INTF_IP', None),\r\n            os.environ.get('SECONDARY_DEVICE_INTF_IP', None),\r\n            os.environ.get('TERTIARY_DEVICE_INTF_IP', None) ]\r\ningest_grpc = ','.join( [ '%s:9910' % ip for ip in ip_list if ip ] )\r\n\r\n# Getting the Ingest Key\r\n# Note: Changing the ingest key requires restarting CVP for the builder to take it.\r\ningest_key = os.environ.get('AERIS_INGEST_KEY', '')\r\n\r\n# Smash tables to exclude\r\nsmash_exclude_list = ['ale',\r\n                      'flexCounter',\r\n                      'hardware',\r\n                      'kni',\r\n                      'pulse',\r\n                      'strata']\r\nsmash_exclude = ','.join(smash_exclude_list)\r\n\r\n# Get Management VRF (allow blank form for default vrf)\r\ningest_vrf = Form.getFieldById( 'vrf' ).getValue()\r\nif not ingest_vrf:\r\n   ingest_vrf = 'default'\r\n\r\n# Print the config\r\nprint 'daemon TerminAttr'\r\nprint '  exec /usr/bin/TerminAttr -smashexcludes=%s ' \\\r\n      '-cvaddr=%s -cvauth=%s' \\\r\n      % (smash_exclude, ingest_grpc, getIngestAuth( ingest_key )) \\\r\n      + ((' -cvvrf=%s -taillogs' % ingest_vrf) if (ingest_vrf != 'default') else '')\r\nprint '  no shutdown'\r\n",
[root@cvp1 cvpi]# pwd
/cvpi
[root@cvp1 cvpi]#
#+END_SRC

#+BEGIN_SRC 
apps/cvp/logs/cvp-backend/catalina.out:[Loaded cvplibrary.CVPGlobalVariables
file:/usr/local/tomcat/work/Catalina/localhost/cvpservice/eclipse/plugins/com.arista.cvp.services.pythonExecutor-1.0.0-SNAPSHOT.jar]
#+END_SRC

- apps/cvp/logs/cvp-backend/catalina.out:
  - [Loaded cvplibrary.CVPGlobalVariables from file:
    - /usr/local/tomcat/work/Catalina/localhost/cvpservice/eclipse/plugins/com.arista.cvp.services.pythonExecutor-1.0.0-SNAPSHOT.jar
      - /usr/local/tomcat/work/Catalina/localhost
      - cvpservice/eclipse/plugins/
      - com.arista.cvp.services.pythonExecutor-1.0.0-SNAPSHOT.jar

#+BEGIN_SRC 
[root@cvp1 data]# find . -name com.arista.cvp.services.pythonExecutor-1.0.0-SNAPSHOT.jar
./containerd/lib/io.containerd.snapshotter.v1.overlayfs/snapshots/169533/fs/usr/local/tomcat/webapps/cvpservice/WEB-INF/eclipse/plugins/com.arista.cvp.services.pythonExecutor-1.0.0-SNAPSHOT.jar
./containerd/lib/io.containerd.snapshotter.v1.overlayfs/snapshots/169533/fs/usr/local/tomcat/work/Catalina/localhost/cvpservice/eclipse/plugins/com.arista.cvp.services.pythonExecutor-1.0.0-SNAPSHOT.jar
./containerd/lib/io.containerd.snapshotter.v1.overlayfs/snapshots/168714/fs/usr/local/tomcat/webapps/cvpservice/WEB-INF/eclipse/plugins/com.arista.cvp.services.pythonExecutor-1.0.0-SNAPSHOT.jar
./containerd/lib/io.containerd.snapshotter.v1.overlayfs/snapshots/168714/fs/usr/local/tomcat/work/Catalina/localhost/cvpservice/eclipse/plugins/com.arista.cvp.services.pythonExecutor-1.0.0-SNAPSHOT.jar
./containerd/run/io.containerd.runtime.v2.task/k8s.io/b232d3508e9e217623bddc470cfd918b5aa98c3a003b3c94f3a60b8310501a65/rootfs/usr/local/tomcat/webapps/cvpservice/WEB-INF/eclipse/plugins/com.arista.cvp.services.pythonExecutor-1.0.0-SNAPSHOT.jar
./containerd/run/io.containerd.runtime.v2.task/k8s.io/b232d3508e9e217623bddc470cfd918b5aa98c3a003b3c94f3a60b8310501a65/rootfs/usr/local/tomcat/work/Catalina/localhost/cvpservice/eclipse/plugins/com.arista.cvp.services.pythonExecutor-1.0.0-SNAPSHOT.jar
[root@cvp1 data]# pwd
/data
#+END_SRC

#+BEGIN_SRC 
[root@cvp1 foo]# tree -d
.
├── com
│   └── arista
│       └── cvp
│           └── services
│               └── python
│                   └── executor
│                       ├── helper
│                       └── service
│                           └── impl
├── cvplibrary
├── lib
├── META-INF
│   └── maven
│       └── com.arista.cvp.services
│           └── com.arista.cvp.services.pythonExecutor
└── proto

16 directories
[root@cvp1 foo]#

#+END_SRC

#+BEGIN_SRC 
[root@cvp1 foo]# tree
.
├── com
│   └── arista
│       └── cvp
│           └── services
│               └── python
│                   └── executor
│                       ├── Activator.class
│                       ├── helper
│                       │   ├── PythonHelper.class
│                       │   └── ResponseCreator.class
│                       └── service
│                           ├── impl
│                           │   ├── GRPCPythonExecutor$Action.class
│                           │   ├── GRPCPythonExecutor.class
│                           │   ├── Result.class
│                           │   ├── ScriptExecutorClient.class
│                           │   ├── ScriptExecutorGrpc.class
│                           │   ├── ScriptExecutorGrpc$MethodHandlers.class
│                           │   ├── ScriptExecutorGrpc$ScriptExecutorBaseDescriptorSupplier.class
│                           │   ├── ScriptExecutorGrpc$ScriptExecutorBlockingStub.class
│                           │   ├── ScriptExecutorGrpc$ScriptExecutorFileDescriptorSupplier.class
│                           │   ├── ScriptExecutorGrpc$ScriptExecutorFutureStub.class
│                           │   ├── ScriptExecutorGrpc$ScriptExecutorImplBase.class
│                           │   ├── ScriptExecutorGrpc$ScriptExecutorMethodDescriptorSupplier.class
│                           │   ├── ScriptExecutorGrpc$ScriptExecutorStub.class
│                           │   ├── ScriptExecutorProto$BatchRequest$1.class
│                           │   ├── ScriptExecutorProto$BatchRequest$Builder.class
│                           │   ├── ScriptExecutorProto$BatchRequest.class
│                           │   ├── ScriptExecutorProto$BatchRequestOrBuilder.class
│                           │   ├── ScriptExecutorProto$BatchResponse$1.class
│                           │   ├── ScriptExecutorProto$BatchResponse$Builder.class
│                           │   ├── ScriptExecutorProto$BatchResponse.class
│                           │   ├── ScriptExecutorProto$BatchResponseOrBuilder.class
│                           │   ├── ScriptExecutorProto.class
│                           │   ├── ScriptExecutorProto$Control$1.class
│                           │   ├── ScriptExecutorProto$Control$Builder.class
│                           │   ├── ScriptExecutorProto$Control.class
│                           │   ├── ScriptExecutorProto$ControlOrBuilder.class
│                           │   ├── ScriptExecutorProto$Form$1.class
│                           │   ├── ScriptExecutorProto$Form$Builder.class
│                           │   ├── ScriptExecutorProto$Form.class
│                           │   ├── ScriptExecutorProto$FormOrBuilder.class
│                           │   ├── ScriptExecutorProto$NetElementFields$1.class
│                           │   ├── ScriptExecutorProto$NetElementFields$Builder.class
│                           │   ├── ScriptExecutorProto$NetElementFields.class
│                           │   ├── ScriptExecutorProto$NetElementFieldsOrBuilder.class
│                           │   ├── ScriptExecutorProto$Request$1.class
│                           │   ├── ScriptExecutorProto$Request$Action$1.class
│                           │   ├── ScriptExecutorProto$Request$Action.class
│                           │   ├── ScriptExecutorProto$Request$Builder.class
│                           │   ├── ScriptExecutorProto$Request.class
│                           │   ├── ScriptExecutorProto$RequestOrBuilder.class
│                           │   ├── ScriptExecutorProto$Response$1.class
│                           │   ├── ScriptExecutorProto$Response$Builder.class
│                           │   ├── ScriptExecutorProto$Response.class
│                           │   ├── ScriptExecutorProto$ResponseOrBuilder.class
│                           │   ├── SessionVariables.class
│                           │   └── SessionVariables$NetElementFields.class
│                           ├── PythonExecutor.class
│                           └── PythonExecutorFactory.class
├── com.arista.cvp.services.pythonExecutor-1.0.0-SNAPSHOT.jar
├── cvplibrary
│   ├── CVPGlobalVariables.class
│   └── GlobalVariableNames.class
├── lib
│   ├── grpc-context.jar
│   ├── grpc-core.jar
│   ├── grpc-netty.jar
│   ├── grpc-protobuf.jar
│   ├── grpc-protobuf-lite.jar
│   ├── grpc-stub.jar
│   ├── guava.jar
│   ├── netty-all.jar
│   ├── netty-buffer.jar
│   ├── netty-common.jar
│   ├── netty-transport.jar
│   ├── opencensus-api.jar
│   ├── opencensus-contrib-grpc-metrics.jar
│   ├── protobuf-java.jar
│   ├── protobuf-java-util.jar
│   └── proto-google-common-protos.jar
├── META-INF
│   ├── MANIFEST.MF
│   └── maven
│       └── com.arista.cvp.services
│           └── com.arista.cvp.services.pythonExecutor
│               ├── pom.properties
│               └── pom.xml
└── proto

#+END_SRC
* TODO api to cvp

- https://arista.my.site.com/AristaCommunity/s/question/0D52I00007ERrHSSA1/cvp-telemetry-data-to-external-nms
- https://arista.my.site.com/AristaCommunity/s/question/0D52I00007ERqNRSA1/forwarding-telemetry-data-from-cvp-to-external-system

** so

- https://github.com/aristanetworks/cloudvision/tree/trunk
  - [X] CloudVision Connector
    - The CloudVision Connector is a simple JavaScript module using WebSockets that enables you to transmit data over an open connection with the CloudVision API server. The CloudVision Connector supports subscribing to data, which lets clients receive streaming updates as data changes in real-time.
  - [ ] cloudvision-grpc-web
    - A grpc-web client for requesting CloudVision data from the frontend. This libraries exposed functions and utils that convert the grpc-web calls to Observable streams that can be manipulated using RXJS
- https://aristanetworks.github.io/cloudvision/modules/cloudvision_connector.html
  - manual

** what about this

- https://github.com/aristanetworks/cloudvision-python
  - cloudvision-python
    - API Documentation for this library can be found here.
    - Documentation for CloudVision's Resource APIs can be found here.
    - [X] Documentation for generic access to CloudVision can be found at CloudVision Connector.
      
