* TODO what is

- https://www.arista.com/assets/data/pdf/Whitepapers/CloudVision_WP.pdf

* TODO f > studio

- provisioning > studios

* TODO api, the interface about f

- studio
- metric

* TODO list of something

- https://github.com/aristanetworks/openmgmt
- https://github.com/aristanetworks/EosSdk

* TODO rac(RESTful API Client), cvprac

- outside to cvp
- https://github.com/aristanetworks/cvprac
- https://github.com/aristanetworks/go-cvprac
- https://arista.my.site.com/AristaCommunity/s/question/0D52I00007ERqFKSA1/rest-api-client

* TODO eapi, Arista EOS command API, eAPI

- from outside and to the eos as e means
- https://buildmedia.readthedocs.org/media/pdf/pyeapi/latest/pyeapi.pdf
- https://github.com/aristanetworks/goeapi
- https://saidvandeklundert.net/2019-08-06-arista-eapi-using-pyeapi/
- https://www.arista.com/assets/data/pdf/Whitepapers/Arista_eAPI_FINAL.pdf

* TODO netops

- https://www.youtube.com/watch?v=DCotdzo7LPI
- https://www.youtube.com/watch?v=0idTsBB_9h4
- http://www.howfunky.com/2021/09/arista-open-source-network-automation.html
- https://www.bitsinflight.com/arista-networks-nfd26/
- [ ] https://www.youtube.com/watch?v=nzFeUN_eR94

* DONE studio using 'arista cloudvision python library'

- inside job
- https://github.com/aristanetworks/cloudvision-python
  - with ctx
    #+BEGIN_SRC bash
      ? pwd
      ~/cloudvision-python-trunk/cloudvision-python-trunk/cloudvision/cvlib
      ? ls -l context.py
      -rw-r--r-- 1 jack 197121 30335 May 19 14:08 context.py
      ?
    #+END_SRC

- [ ] https://aristanetworks.github.io/cloudvision-apis/rpcs/

#+BEGIN_SRC 
from cloudvision.Connector.grpc_client import GRPCClient, create_query
import cloudvision.cvlib as cvlib
import ipaddress
import re
import time
from collections import Counter, OrderedDict
import tagsearch_python.tagsearch_pb2_grpc as tsgr
import tagsearch_python.tagsearch_pb2 as tspb
from arista.tag.v2.tag_pb2 import TagKey, \
    TagAssignmentKey
from arista.tag.v2.services import TagConfigServiceStub, \
    TagAssignmentConfigServiceStub, \
    TagConfigSetRequest, \
    TagAssignmentConfigSetRequest
#+END_SRC 

* DONE get_token.py

- https://github.com/aristanetworks/cloudvision-python/tree/trunk/examples

#+BEGIN_SRC 
  558  sudo pip3 install cvprac
  561  sudo pip3 install arista
  568  sudo pip3 install networking-arista
  575  sudo pip3 install cloudvision
#+END_SRC

#+BEGIN_SRC 
  507  wget https://raw.githubusercontent.com/aristanetworks/cloudvision-python/trunk/examples/get_token.py
  555  wget https://raw.githubusercontent.com/aristanetworks/cloudvision-python/trunk/examples/resources/event/get_events.py
#+END_SRC

#+BEGIN_SRC 
? pip install requests
? python get_token.py --server cvp1.t.com --username cvpadmin --password 1234qwer -ssl &>/dev/null
? ls
cvp.crt  get_events.py  get_token.py  token.txt
#+END_SRC

- https://pypi.org/project/cvprac/
- https://pypi.org/project/cloudvision
- https://arista.my.site.com/AristaCommunity/s/article/Understanding-CloudVIsion-APIs-and-accessing-NetDB-data

* DONE get_events.py

#+BEGIN_SRC 
? pip install wheel
? pip install grpcio
? pip install cloudvision
? python3 get_events.py --server cvp1.t.com --token-file token.txt --cert-file cvp.crt
selecting events that match the filter partial_eq_filter {
}

value {
  key {
    key {
      value: "5473c5eb9c6556b"
    }
    timestamp {
      seconds: 1679970676
      nanos: 608912553
    }
  }
#+END_SRC

* DONE get_versions.py

#+BEGIN_SRC 
wget https://raw.githubusercontent.com/aristanetworks/cloudvision-python/trunk/examples/resources/inventory/get_versions.py
#+END_SRC

#+BEGIN_SRC 
? python3 get_versions.py --server cvp1.t.com --token-file token.txt --cert-file cvp.crt
Hostname                 EOS Version

arista1                  4.27.5M
#+END_SRC

* DONE lookup_device.py

#+BEGIN_SRC 
wget https://raw.githubusercontent.com/aristanetworks/cloudvision-python/trunk/examples/resources/inventory/lookup_device.py
#+END_SRC

#+BEGIN_SRC 
? python3 lookup_device.py --server cvp1.t.com --token-file token.txt --cert-file cvp.crt --hostname arista1
value {
  software_version {
    value: "4.27.5M"
  }
  hostname {
    value: "arista1"
  }
  domain_name {
  }
#+END_SRC

* DONE example_utility.py

#+BEGIN_SRC 
 wget https://raw.githubusercontent.com/aristanetworks/cloudvision-python/trunk/examples/resources/inventory/example_utility.py
#+END_SRC

#+BEGIN_SRC
? python3 example_utility.py --server cvp1.t.com --token-file token.txt --cert-file cvp.crt --inactive | grep Leaf | sort
Leaf3                    64D3D5201301F4D4A22A805958EC4B68
Leaf4                    7C1DAD1BD37725FB0914A9503280603C
Leaf5                    1284FF4684184FD2D66BD3FDBF110D32
Leaf6                    DA73DA847166A7297FDFD736F06F2D81
?
#+END_SRC
* TODO Connector rel

- https://github.com/aristanetworks/cloudvision-python/tree/trunk/examples/Connector
#+BEGIN_SRC 
  612  wget https://raw.githubusercontent.com/aristanetworks/cloudvision-python/trunk/examples/Connector/parser.py
  613  wget https://raw.githubusercontent.com/aristanetworks/cloudvision-python/trunk/examples/Connector/utils.py
  614  wget https://raw.githubusercontent.com/aristanetworks/cloudvision-python/trunk/examples/Connector/get_intf_status.py
#+END_SRC

#+BEGIN_SRC 
? python3 get_intf_status.py --apiserver cvp1.t.com --auth=token,token.txt,cvp.crt --deviceId JPE14073114 | grep linkUp
Ethernet10               linkUp
Management1              linkUp
#+END_SRC
* TODO cvplibrary at configlet

- https://www.arista.com/en/cg-cv/cv-creating-configlets

#+BEGIN_SRC 
[root@cvp1 cvpi]# grep -r cvplibrary *
apps/cvp/logs/cvp-backend/catalina.out:[Loaded cvplibrary.CVPGlobalVariables from file:/usr/local/tomcat/work/Catalina/localhost/cvpservice/eclipse/plugins/com.arista.cvp.services.pythonExecutor-1.0.0-SNAPSHOT.jar]
pythonlab/Lib/ssl.py:            from cvplibrary import CVPCertPathHolder as pathHolder
pythonlab/Lib/jsonrpclib/SSLCertificate.py:#Read the isDCAEnabled from cvplibrary
pythonlab/Lib/jsonrpclib/SSLCertificate.py:from cvplibrary import CVPCertPathHolder
resources/initData.json:                  "data": "import os\r\nimport cvp\r\nfrom cvplibrary import Form, CVPGlobalVariables, GlobalVariableNames\r\n\r\ndef terminAttrCertEnabled():\r\n   ''' Returns True if TerminAttr cert is enabled.\r\n    Otherwise returns False.\r\n    '''\r\n   server = cvp.Cvp( os.environ.get( 'CURRENT_NODE_IP', '127.0.0.1' ) )\r\n   sid = CVPGlobalVariables.getValue( GlobalVariableNames.CVP_SESSION_ID )\r\n   server.sessionIs( sid )\r\n   return server.getTerminattrCertEnable()\r\n\r\ndef getIngestAuth( ingestKey ):\r\n   ''' Returns the ingest auth option string.\r\n   '''\r\n   ingestAuth = 'key,' + ingestKey\r\n   if terminAttrCertEnabled():\r\n      ingestAuth = 'token,/tmp/token'\r\n   return ingestAuth\r\n\r\n# Using the CVP device interface for receiving telemetry data\r\nip_list = [ os.environ.get('PRIMARY_DEVICE_INTF_IP', None),\r\n            os.environ.get('SECONDARY_DEVICE_INTF_IP', None),\r\n            os.environ.get('TERTIARY_DEVICE_INTF_IP', None) ]\r\ningest_grpc = ','.join( [ '%s:9910' % ip for ip in ip_list if ip ] )\r\n\r\n# Getting the Ingest Key\r\n# Note: Changing the ingest key requires restarting CVP for the builder to take it.\r\ningest_key = os.environ.get('AERIS_INGEST_KEY', '')\r\n\r\n# Smash tables to exclude\r\nsmash_exclude_list = ['ale',\r\n                      'flexCounter',\r\n                      'hardware',\r\n                      'kni',\r\n                      'pulse',\r\n                      'strata']\r\nsmash_exclude = ','.join(smash_exclude_list)\r\n\r\n# Get Management VRF (allow blank form for default vrf)\r\ningest_vrf = Form.getFieldById( 'vrf' ).getValue()\r\nif not ingest_vrf:\r\n   ingest_vrf = 'default'\r\n\r\n# Print the config\r\nprint 'daemon TerminAttr'\r\nprint '  exec /usr/bin/TerminAttr -smashexcludes=%s ' \\\r\n      '-cvaddr=%s -cvauth=%s' \\\r\n      % (smash_exclude, ingest_grpc, getIngestAuth( ingest_key )) \\\r\n      + ((' -cvvrf=%s -taillogs' % ingest_vrf) if (ingest_vrf != 'default') else '')\r\nprint '  no shutdown'\r\n",
[root@cvp1 cvpi]# pwd
/cvpi
[root@cvp1 cvpi]#
#+END_SRC

#+BEGIN_SRC 
apps/cvp/logs/cvp-backend/catalina.out:[Loaded cvplibrary.CVPGlobalVariables
file:/usr/local/tomcat/work/Catalina/localhost/cvpservice/eclipse/plugins/com.arista.cvp.services.pythonExecutor-1.0.0-SNAPSHOT.jar]
#+END_SRC

- apps/cvp/logs/cvp-backend/catalina.out:
  - [Loaded cvplibrary.CVPGlobalVariables from file:
    - /usr/local/tomcat/work/Catalina/localhost/cvpservice/eclipse/plugins/com.arista.cvp.services.pythonExecutor-1.0.0-SNAPSHOT.jar
      - /usr/local/tomcat/work/Catalina/localhost
      - cvpservice/eclipse/plugins/
      - com.arista.cvp.services.pythonExecutor-1.0.0-SNAPSHOT.jar

#+BEGIN_SRC 
[root@cvp1 data]# find . -name com.arista.cvp.services.pythonExecutor-1.0.0-SNAPSHOT.jar
./containerd/lib/io.containerd.snapshotter.v1.overlayfs/snapshots/169533/fs/usr/local/tomcat/webapps/cvpservice/WEB-INF/eclipse/plugins/com.arista.cvp.services.pythonExecutor-1.0.0-SNAPSHOT.jar
./containerd/lib/io.containerd.snapshotter.v1.overlayfs/snapshots/169533/fs/usr/local/tomcat/work/Catalina/localhost/cvpservice/eclipse/plugins/com.arista.cvp.services.pythonExecutor-1.0.0-SNAPSHOT.jar
./containerd/lib/io.containerd.snapshotter.v1.overlayfs/snapshots/168714/fs/usr/local/tomcat/webapps/cvpservice/WEB-INF/eclipse/plugins/com.arista.cvp.services.pythonExecutor-1.0.0-SNAPSHOT.jar
./containerd/lib/io.containerd.snapshotter.v1.overlayfs/snapshots/168714/fs/usr/local/tomcat/work/Catalina/localhost/cvpservice/eclipse/plugins/com.arista.cvp.services.pythonExecutor-1.0.0-SNAPSHOT.jar
./containerd/run/io.containerd.runtime.v2.task/k8s.io/b232d3508e9e217623bddc470cfd918b5aa98c3a003b3c94f3a60b8310501a65/rootfs/usr/local/tomcat/webapps/cvpservice/WEB-INF/eclipse/plugins/com.arista.cvp.services.pythonExecutor-1.0.0-SNAPSHOT.jar
./containerd/run/io.containerd.runtime.v2.task/k8s.io/b232d3508e9e217623bddc470cfd918b5aa98c3a003b3c94f3a60b8310501a65/rootfs/usr/local/tomcat/work/Catalina/localhost/cvpservice/eclipse/plugins/com.arista.cvp.services.pythonExecutor-1.0.0-SNAPSHOT.jar
[root@cvp1 data]# pwd
/data
#+END_SRC

#+BEGIN_SRC 
[root@cvp1 foo]# tree -d
.
├── com
│   └── arista
│       └── cvp
│           └── services
│               └── python
│                   └── executor
│                       ├── helper
│                       └── service
│                           └── impl
├── cvplibrary
├── lib
├── META-INF
│   └── maven
│       └── com.arista.cvp.services
│           └── com.arista.cvp.services.pythonExecutor
└── proto

16 directories
[root@cvp1 foo]#

#+END_SRC

#+BEGIN_SRC 
[root@cvp1 foo]# tree
.
├── com
│   └── arista
│       └── cvp
│           └── services
│               └── python
│                   └── executor
│                       ├── Activator.class
│                       ├── helper
│                       │   ├── PythonHelper.class
│                       │   └── ResponseCreator.class
│                       └── service
│                           ├── impl
│                           │   ├── GRPCPythonExecutor$Action.class
│                           │   ├── GRPCPythonExecutor.class
│                           │   ├── Result.class
│                           │   ├── ScriptExecutorClient.class
│                           │   ├── ScriptExecutorGrpc.class
│                           │   ├── ScriptExecutorGrpc$MethodHandlers.class
│                           │   ├── ScriptExecutorGrpc$ScriptExecutorBaseDescriptorSupplier.class
│                           │   ├── ScriptExecutorGrpc$ScriptExecutorBlockingStub.class
│                           │   ├── ScriptExecutorGrpc$ScriptExecutorFileDescriptorSupplier.class
│                           │   ├── ScriptExecutorGrpc$ScriptExecutorFutureStub.class
│                           │   ├── ScriptExecutorGrpc$ScriptExecutorImplBase.class
│                           │   ├── ScriptExecutorGrpc$ScriptExecutorMethodDescriptorSupplier.class
│                           │   ├── ScriptExecutorGrpc$ScriptExecutorStub.class
│                           │   ├── ScriptExecutorProto$BatchRequest$1.class
│                           │   ├── ScriptExecutorProto$BatchRequest$Builder.class
│                           │   ├── ScriptExecutorProto$BatchRequest.class
│                           │   ├── ScriptExecutorProto$BatchRequestOrBuilder.class
│                           │   ├── ScriptExecutorProto$BatchResponse$1.class
│                           │   ├── ScriptExecutorProto$BatchResponse$Builder.class
│                           │   ├── ScriptExecutorProto$BatchResponse.class
│                           │   ├── ScriptExecutorProto$BatchResponseOrBuilder.class
│                           │   ├── ScriptExecutorProto.class
│                           │   ├── ScriptExecutorProto$Control$1.class
│                           │   ├── ScriptExecutorProto$Control$Builder.class
│                           │   ├── ScriptExecutorProto$Control.class
│                           │   ├── ScriptExecutorProto$ControlOrBuilder.class
│                           │   ├── ScriptExecutorProto$Form$1.class
│                           │   ├── ScriptExecutorProto$Form$Builder.class
│                           │   ├── ScriptExecutorProto$Form.class
│                           │   ├── ScriptExecutorProto$FormOrBuilder.class
│                           │   ├── ScriptExecutorProto$NetElementFields$1.class
│                           │   ├── ScriptExecutorProto$NetElementFields$Builder.class
│                           │   ├── ScriptExecutorProto$NetElementFields.class
│                           │   ├── ScriptExecutorProto$NetElementFieldsOrBuilder.class
│                           │   ├── ScriptExecutorProto$Request$1.class
│                           │   ├── ScriptExecutorProto$Request$Action$1.class
│                           │   ├── ScriptExecutorProto$Request$Action.class
│                           │   ├── ScriptExecutorProto$Request$Builder.class
│                           │   ├── ScriptExecutorProto$Request.class
│                           │   ├── ScriptExecutorProto$RequestOrBuilder.class
│                           │   ├── ScriptExecutorProto$Response$1.class
│                           │   ├── ScriptExecutorProto$Response$Builder.class
│                           │   ├── ScriptExecutorProto$Response.class
│                           │   ├── ScriptExecutorProto$ResponseOrBuilder.class
│                           │   ├── SessionVariables.class
│                           │   └── SessionVariables$NetElementFields.class
│                           ├── PythonExecutor.class
│                           └── PythonExecutorFactory.class
├── com.arista.cvp.services.pythonExecutor-1.0.0-SNAPSHOT.jar
├── cvplibrary
│   ├── CVPGlobalVariables.class
│   └── GlobalVariableNames.class
├── lib
│   ├── grpc-context.jar
│   ├── grpc-core.jar
│   ├── grpc-netty.jar
│   ├── grpc-protobuf.jar
│   ├── grpc-protobuf-lite.jar
│   ├── grpc-stub.jar
│   ├── guava.jar
│   ├── netty-all.jar
│   ├── netty-buffer.jar
│   ├── netty-common.jar
│   ├── netty-transport.jar
│   ├── opencensus-api.jar
│   ├── opencensus-contrib-grpc-metrics.jar
│   ├── protobuf-java.jar
│   ├── protobuf-java-util.jar
│   └── proto-google-common-protos.jar
├── META-INF
│   ├── MANIFEST.MF
│   └── maven
│       └── com.arista.cvp.services
│           └── com.arista.cvp.services.pythonExecutor
│               ├── pom.properties
│               └── pom.xml
└── proto

#+END_SRC
* TODO api to cvp

- https://arista.my.site.com/AristaCommunity/s/question/0D52I00007ERrHSSA1/cvp-telemetry-data-to-external-nms
- https://arista.my.site.com/AristaCommunity/s/question/0D52I00007ERqNRSA1/forwarding-telemetry-data-from-cvp-to-external-system

** so

- https://github.com/aristanetworks/cloudvision/tree/trunk
  - [X] CloudVision Connector
    - The CloudVision Connector is a simple JavaScript module using WebSockets that enables you to transmit data over an open connection with the CloudVision API server. The CloudVision Connector supports subscribing to data, which lets clients receive streaming updates as data changes in real-time.
  - [ ] cloudvision-grpc-web
    - A grpc-web client for requesting CloudVision data from the frontend. This libraries exposed functions and utils that convert the grpc-web calls to Observable streams that can be manipulated using RXJS
- https://aristanetworks.github.io/cloudvision/modules/cloudvision_connector.html
  - manual

** what about this

- https://github.com/aristanetworks/cloudvision-python
  - cloudvision-python
    - API Documentation for this library can be found here.
    - Documentation for CloudVision's Resource APIs can be found here.
    - [X] Documentation for generic access to CloudVision can be found at CloudVision Connector.
      
* at school

- https://www.fastlanetraining.ca/course/arista-cvp

* ---
* list to be Arista CloudVision Portal Specialist

** process 

*** before

**** steps

1. understanding Arista network design(arista validated design)
   - network essential first
   - this is the best practice from the arista network engineer
2. know about CloudVision Portal
   - means know about what it it and how to use
3. know about CloudVision Portal's Studio to deploy
   - automate using studio

*** in the middle to modify Studio

**** steps

1. Cloudvision API is
2. using Arista Cloudvision Python Libraries x 3
   - Python first, depth
   - dependencies on the following python libraries x 37

*** automate out of the studio, using Ansble

- learn about collections and deploy samples enough to know
  - be a practical ansible user first
  - link back to 'Arista Design and Deployment Guides'
    - https://avd.arista.com

**** steps

- arista.eos collection include x 34 modules
- arista.cvp collection include x11 modules
- arista.avd collection include x 8 modules

** DONE Design Guide

- https://www.arista.com/en/solutions/design-guides
- aka avd, arista validated design

*** list

- [ ] Arista Universal Cloud Network Design Guide 
- [ ] Layer 3 Leaf & Spine Design and Deployment Guide 
- [ ] EVPN Deployment Guide 
- Layer 2 Leaf & Spine Design and Deployment Guide 
- Arista Cognitive Campus Design Guide 
  
** DONE know about cvp

- https://www.arista.com/assets/data/pdf/Whitepapers/CloudVision_WP.pdf
- https://www.arista.com/en/solutions/design-guides
- Arista CloudVision Portal (CVP) for Day 2 Network Operations Design Guide

** DONE cvp > provisioning > studio

- https://github.com/arista-netdevops-community/CloudVisionPortal-Examples/tree/master/CloudVision_Studios

*** list

- [ ] ACLs QOS_Studio
- Campus Fabric v2
- Connected Endpoints
- Create SNMPv3_Users
- DCI & L3 Edge
- EVPN Services
- Enterprise Routing_Studio
- InterOp Examples_for_Studios
- Interface Manager
- L3 Leaf Spine No BFD
- [ ] L3 Leaf-Spine
- MPLS Fabric
- Service Provisioning
- Tag Manager_Script
- VPWS Services

** cvp > provisioning > configlet

- https://github.com/arista-netdevops-community/CloudVisionPortal-Examples/tree/master/CloudVision_ConfigletBuilders

*** list

- Build MLAG_Stack
- DeployDataCenter
- EX0 TestGlobalsBuilder
- EX10 EVPN
- EX11 IPSECTunnelvRouter
- EX12 FabricBuilder
- EX13 deviceAPI_MgmtIntBuilder
- EX14 Day2_Operations_Overlay_Interfaces
- EX15 SelfSignedCertificate
- EX1 Form_MgmtIntBuilder
- EX2 eAPI_MgmtIntBuilder
- EX3 SSH_MgmtIntBuilder
- EX4 mySQL_MgmtIntBuilder
- EX5 VxlanBuilder
- EX6 BasicBuilder
- EX7 BuildMLAG
- EX8 LeafBuilder
- EX9 SingleVXLANandVLANProvisioning
- Interface Shutdown
- MLAG Stack_Builder
- PasswordChange
- SNMP Localised_Users
- ServiceOption
- Update vEOS_Serial_Numbers
- free ports
- parse configlet_export.py
- rest client
- servicesDB

** DONE Cloudvision API

- https://github.com/aristanetworks/cloudvision-apis
- Cloudvision APIs are state based, resource-oriented APIs in which resources are divided into configuration data models (known as config) and operational and/or derived state models (known as state). Resources are modeled in Protobuf and accessed over gRPC with a standardized set of RPCs.

** DONE Python code/library

*** TODO Arista CloudVision Python Library

- The Arista CloudVision Python library provides access to Arista's CloudVision APIs for use in Python applications.
- https://github.com/aristanetworks/cloudvision-python/tree/trunk

**** list

- cloudvision package
- arista package
- fmp package

*** TODO Arista Cloudvision Portal RESTful API Client(cvprac)

- This module provides a RESTful API client for Cloudvision® Portal (CVP) which can be used for building applications that work with Arista CVP.
- https://github.com/aristanetworks/cvprac

**** list

- cvp package
- cvp client package

*** TODO CloudVision Connector

- https://aristanetworks.github.io/cloudvision/modules/cloudvision_connector.html
- https://github.com/aristanetworks/cloudvision
- https://github.com/aristanetworks/cloudvision-python/tree/trunk/examples/Connector

**** list

- a-msgpack
- cloudvision-connector
  - The CloudVision Connector is a simple JavaScript module using WebSockets that enables you to transmit data over an open connection with the CloudVision API server. The CloudVision Connector supports subscribing to data, which lets clients receive streaming updates as data changes in real-time.
- cloudvision-grpc-web
  - A grpc-web client for requesting CloudVision data from the frontend. This libraries exposed functions and utils that convert the grpc-web calls to Observable streams that can be manipulated using RXJS.

** DONE Python modules, dependencies on the following python libraries

- argparse
- builtins
- collections
- concurrent
- copy
- cryptography
- csv
- datetime
- dst_parser
- enum
- functools
- google/protobuf
- grpc
- io
- json
- logging
- msgpack
- notification
- numpy
- os
- parser
- pathlib
- pytest
- requests
- setuptools
- sharding
- signal
- ssl
- sys
- time
- typing
- typing_extensions
- unittest
- urllib3
- utils
- uuid
- yaml

** DONE essential about python

- python, practical
  - data structure
  - decorator
  - pytest
    
** DONE essential about ansible

- ansible
  - optional, ansible tower(alternative awx)

** additional requirement 

- grpc/protobuf
- mako template
    
** TODO ansible modules about avd and to be used

- link back to avd doc

*** arista.avd x 8

- https://github.com/aristanetworks/ansible-avd/tree/devel/ansible_collections/arista/avd
- https://avd.arista.com

**** list

- arista.avd.eos_designs - Opinionated Data model to assist with the deployment of Arista Validated Designs.
- arista.avd.eos_cli_config_gen - Generate Arista EOS cli syntax and device documentation.
- arista.avd.eos_config_deploy_cvp - Deploys intended configuration via CloudVision.
- arista.avd.eos_config_deploy_eapi - Deploys intended configuration via eAPI.
- arista.avd.cvp_configlet_upload - Uploads configlets from a local folder to CloudVision Server.
- arista.avd.eos_validate_state - Validate operational states of Arista EOS devices.
- arista.avd.eos_snapshot - Collect commands on EOS devices and generate reports.
- arista.avd.dhcp_provisioner - Configure an ISC-DHCP server to provide ZTP services and CloudVision registration.

*** arista.eos x 34

- https://docs.ansible.com/ansible/latest/collections/arista/eos/index.html

**** list

- eos_acl_interfaces module – ACL interfaces resource module
- eos_acls module – ACLs resource module
- eos_banner module – Manage multiline banners on Arista EOS devices
- eos_bgp module – (deprecated, removed after 2023-01-29) Configure global BGP protocol settings on Arista EOS.
- eos_bgp_address_family module – Manages BGP address family resource module
- eos_bgp_global module – Manages BGP global resource module
- eos_command module – Run arbitrary commands on an Arista EOS device
- eos_config module – Manage Arista EOS configuration sections
- eos_eapi module – Manage and configure Arista EOS eAPI.
- eos_facts module – Collect facts from remote devices running Arista EOS
- eos_hostname module – Manages hostname resource module
- eos_interfaces module – Interfaces resource module
- eos_l2_interfaces module – L2 interfaces resource module
- eos_l3_interfaces module – L3 interfaces resource module
- eos_lacp module – LACP resource module
- eos_lacp_interfaces module – LACP interfaces resource module
- eos_lag_interfaces module – LAG interfaces resource module
- eos_lldp module – Manage LLDP configuration on Arista EOS network devices
- eos_lldp_global module – LLDP resource module
- eos_lldp_interfaces module – LLDP interfaces resource module
- eos_logging module – Manage logging on network devices
- eos_logging_global module – Manages logging resource module
- eos_ntp_global module – Manages ntp resource module
- eos_ospf_interfaces module – OSPF Interfaces Resource Module.
- eos_ospfv2 module – OSPFv2 resource module
- eos_ospfv3 module – OSPFv3 resource module
- eos_prefix_lists module – Manages Prefix lists resource module
- eos_route_maps module – Manages Route Maps resource module
- eos_snmp_server module – Manages snmp_server resource module
- eos_static_routes module – Static routes resource module
- eos_system module – Manage the system attributes on Arista EOS devices
- eos_user module – Manage the collection of local users on EOS devices
- eos_vlans module – VLANs resource module
- eos_vrf module – Manage VRFs on Arista EOS network devices

*** arista.cvp x 11

- https://cvp.avd.sh/en/stable/

**** list

- arista.cvp.cv_configlet_v3 - Manage configlet configured on CVP.
- arista.cvp.cv_container_v3 - Manage container topology and attach configlet and devices to containers.
- arista.cvp.cv_device_v3 - Manage devices configured on CVP
- arista.cvp.cv_task_v3 - Run tasks created on CVP.
- arista.cvp.cv_facts_v3 - Collect information from CloudVision.
- arista.cvp.cv_image_v3 - Create EOS images and bundles on CloudVision.
- arista.cvp.cv_tag_v3 - Create, delete, assign and unassign tags on CloudVision.
- arista.cvp.cv_validate_v3 - Configlet validation
- arista.cvp.cv_change_control_v3 - Manage change controls on CloudVision.
- arista.cvp.dhcp_configuration - Configure DHCPD service on a CloudVision server or any dhcpd service.
- arista.cvp.configlet_sync - Synchronize configlets between multiple CloudVision servers.

* TODO ctx

- [ ] https://github.com/colinmacgiolla/cvp-actions
- [ ] https://www.arista.com/en/support/toi/cvp-2021-3-0/14901-ui-for-custom-action-scripts

The script execution environment provides a context object (ctx) for use in action scripts. This context object holds a number of fields and helper functions to assist with script creation, such as the ability to access script arguments and create CloudVision resource API clients. The fields and methods described in the ctx object are described in the following section.

Functions
Below is a list of ctx functions:

ctx.getDevice(): Returns the device associated with the context. Returns None if there is 0, or more than 1 device associated to the context
ctx.runDeviceCmds(command list): Takes a list of commands to run on the device associated with the context, and returns returns list of JSON objects containing the outputs of the commands
ctx.alog(message): Takes a string message and posts it to the alog with the message encoded in the body
ctx.getApiClient(stub): Instantiates and returns a CloudVision client to the service server based on the current user auth token and the provided resource stub
ctx.getCvClient(): Instantiates and returns a CloudVision connector client to the cv database based on the current user auth token. For further information on the connector client and its uses, please visit the cloudvision-python github
ctx.changeControl.getStartTime(cv client): Uses the provided CloudVision connector client to query the DB and get the change control's start time as a Unix timestamp

* TODO [2023-08-01 화] cvp dhcpd.conf

#+BEGIN_SRC 
option domain-name "t.com";
option domain-name-servers 192.168.25.20;
option ntp-servers 192.168.25.116;

default-lease-time 600;
max-lease-time 7200;

ddns-update-style none;

subnet 192.168.25.0 netmask 255.255.255.0 {
  option subnet-mask 255.255.255.0;
  option broadcast-address 192.168.25.255;
  option routers 192.168.25.1;
  option bootfile-name "http://192.168.25.208/ztp/bootstrap";
  pool {
    range 192.168.25.110 192.168.25.130;
  }
}

host arista1 {
  # hardware ethernet 00:1c:73:57:46:82; <- system mac
  # hhardware ethernet 00:1c:73:57:46:80; <- ma1
  # sserver-name "ylit-arista1";
  option dhcp-client-identifier 00:1c:73:57:46:82;
  # fixed-address arista1.t.com;
  fixed-address 192.168.25.251;
  option bootfile-name "https://192.168.25.191/ztp/bootstrap";
}
#+END_SRC

* TODO [2023-08-01 화] cvp related ntp.conf

#+BEGIN_SRC 
? diff ntp.conf.orig ntp.conf
21,24c21,24
< pool 0.ubuntu.pool.ntp.org iburst
< pool 1.ubuntu.pool.ntp.org iburst
< pool 2.ubuntu.pool.ntp.org iburst
< pool 3.ubuntu.pool.ntp.org iburst
---
> #pool 0.ubuntu.pool.ntp.org iburst
> #pool 1.ubuntu.pool.ntp.org iburst
> #pool 2.ubuntu.pool.ntp.org iburst
> #pool 3.ubuntu.pool.ntp.org iburst
27c27,29
< pool ntp.ubuntu.com
---
> #pool ntp.ubuntu.com
> server 127.127.1.0 prefer
> fudge 127.127.1.0 stratum 10
#+END_SRC
