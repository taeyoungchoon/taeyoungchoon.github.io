* k3d with powershell
#+BEGIN_SRC 
PS C:\WINDOWS\system32> k3d cluster stop clus
INFO[0000] Stopping cluster 'clus'
INFO[0012] Stopped cluster 'clus'

PS C:\WINDOWS\system32> k3d cluster start clus
INFO[0000] Using the k3d-tools node to gather environment information
INFO[0000] Starting new tools node...
INFO[0000] Starting Node 'k3d-clus-tools'
WARN[0003] failed to resolve 'host.docker.internal' from inside the k3d-tools node: Failed to read address for 'host.docker.internal' from command output
INFO[0003] HostIP: using network gateway...
INFO[0003] Starting cluster 'clus'
INFO[0003] Starting servers...
INFO[0004] Starting Node 'k3d-clus-server-0'
INFO[0004] Deleted k3d-clus-tools
INFO[0012] Starting agents...
INFO[0012] Starting helpers...
INFO[0012] Starting Node 'k3d-clus-serverlb'
INFO[0020] Injecting '172.18.0.1 host.k3d.internal' into /etc/hosts of all nodes...
INFO[0020] Injecting records for host.k3d.internal and for 2 network members into CoreDNS configmap...
INFO[0021] Started cluster 'clus'
PS C:\WINDOWS\system32>
#+END_SRC

#+BEGIN_SRC 
Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

Try the new cross-platform PowerShell https://aka.ms/pscore6

PS C:\Users\jack> k3d.exe help
https://k3d.io/
k3d is a wrapper CLI that helps you to easily create k3s clusters inside docker.
Nodes of a k3d cluster are docker containers running a k3s image.
All Nodes of a k3d cluster are part of the same docker network.

Usage:
  k3d [flags]
  k3d [command]

Available Commands:
  cluster      Manage cluster(s)
  completion   Generate completion scripts for [bash, zsh, fish, powershell | psh]
  config       Work with config file(s)
  help         Help about any command
  image        Handle container images.
  kubeconfig   Manage kubeconfig(s)
  node         Manage node(s)
  registry     Manage registry/registries
  version      Show k3d and default k3s version

Flags:
  -h, --help         help for k3d
      --timestamps   Enable Log timestamps
      --trace        Enable super verbose output (trace logging)
      --verbose      Enable verbose output (debug logging)
      --version      Show k3d and default k3s version

Use "k3d [command] --help" for more information about a command.
PS C:\Users\jack> k3d.exe cluster list
NAME   SERVERS   AGENTS   LOADBALANCER
clus   0/1       0/0      true
PS C:\Users\jack> k3d.exe cluster --help
Manage cluster(s)

Usage:
  k3d cluster [flags]
  k3d cluster [command]

Available Commands:
  create      Create a new cluster
  delete      Delete cluster(s).
  edit        [EXPERIMENTAL] Edit cluster(s).
  list        List cluster(s)
  start       Start existing k3d cluster(s)
  stop        Stop existing k3d cluster(s)

Flags:
  -h, --help   help for cluster

Global Flags:
      --timestamps   Enable Log timestamps
      --trace        Enable super verbose output (trace logging)
      --verbose      Enable verbose output (debug logging)

Use "k3d cluster [command] --help" for more information about a command.
PS C:\Users\jack> k3d.exe cluster edit
Error: accepts 1 arg(s), received 0
Usage:
  k3d cluster edit CLUSTER [flags]

Aliases:
  edit, update

Flags:
  -h, --help                                                               help for edit
      --port-add [HOST:][HOSTPORT:]CONTAINERPORT[/PROTOCOL][@NODEFILTER]   [EXPERIMENTAL] Map ports from the node containers (via the serverlb) to the host (Format: [HOST:][HOSTPORT:]CONTAINERPORT[/PROTOCOL][@NODEFILTER])
                                                                            - Example: `k3d node edit k3d-mycluster-serverlb --port-add 8080:80`

Global Flags:
      --timestamps   Enable Log timestamps
      --trace        Enable super verbose output (trace logging)
      --verbose      Enable verbose output (debug logging)

FATA[0000] accepts 1 arg(s), received 0
PS C:\Users\jack> k3d.exe config
Work with config file(s)

Usage:
  k3d config [flags]
  k3d config [command]

Available Commands:
  init
  migrate

Flags:
  -h, --help   help for config

Global Flags:
      --timestamps   Enable Log timestamps
      --trace        Enable super verbose output (trace logging)
      --verbose      Enable verbose output (debug logging)

Use "k3d config [command] --help" for more information about a command.
PS C:\Users\jack> k3d.exe kubeconfig
Manage kubeconfig(s)

Usage:
  k3d kubeconfig [flags]
  k3d kubeconfig [command]

Available Commands:
  get         Print kubeconfig(s) from cluster(s).
  merge       Write/Merge kubeconfig(s) from cluster(s) into new or existing kubeconfig/file.

Flags:
  -h, --help   help for kubeconfig

Global Flags:
      --timestamps   Enable Log timestamps
      --trace        Enable super verbose output (trace logging)
      --verbose      Enable verbose output (debug logging)

Use "k3d kubeconfig [command] --help" for more information about a command.
PS C:\Users\jack> k3d.exe kubeconfig get
Error: Need to specify one or more cluster names *or* set `--all` flag
Usage:
  k3d kubeconfig get [CLUSTER [CLUSTER [...]] | --all] [flags]

Aliases:
  get, print, show

Flags:
  -a, --all    Output kubeconfigs from all existing clusters
  -h, --help   help for get

Global Flags:
      --timestamps   Enable Log timestamps
      --trace        Enable super verbose output (trace logging)
      --verbose      Enable verbose output (debug logging)

FATA[0000] Need to specify one or more cluster names *or* set `--all` flag
PS C:\Users\jack> k3d.exe kubeconfig get -a
---
apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJkekNDQVIyZ0F3SUJBZ0lCQURBS0JnZ3Foa2pPUFFRREFqQWpNU0V3SHdZRFZRUUREQmhyTTNNdGMyVnkKZG1WeUxXTmhRREUyTXpZd01qQTBPVE13SGhjTk1qRXhNVEEwTVRBd09ERXpXaGNOTXpFeE1UQXlNVEF3T0RFegpXakFqTVNFd0h3WURWUVFEREJock0zTXRjMlZ5ZG1WeUxXTmhRREUyTXpZd01qQTBPVE13V1RBVEJnY3Foa2pPClBRSUJCZ2dxaGtqT1BRTUJCd05DQUFSZGJVN1dZbjhEUlhnR0Z1M2E4QjFQT1cvQVhpK3VMZUkxSG5ORFN2cGgKMU1BeEhjWkhyNzhNdHplM04wVjNGWEVUVkNheXpEclNnZEhqSFNnN0ZCcTRvMEl3UURBT0JnTlZIUThCQWY4RQpCQU1DQXFRd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVVNRS01nc3liV0V1T2NUTVhqTmJECk4vWllrTmt3Q2dZSUtvWkl6ajBFQXdJRFNBQXdSUUlnQVgyZlRsMGJLUzQ1M3Z5VFhBY3U0cmhmLzdRL2VHVE4Kd0hTWHNBKzVmQXNDSVFDTVdzZ2RZSE9aVTRKeWpRN0N6ZzlNeFhNcVMza08vMFNTMWZYRm1UUVd1dz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
    server: https://0.0.0.0:2118
  name: k3d-clus
contexts:
- context:
    cluster: k3d-clus
    user: admin@k3d-clus
  name: k3d-clus
current-context: k3d-clus
kind: Config
preferences: {}
users:
- name: admin@k3d-clus
  user:
    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJrVENDQVRlZ0F3SUJBZ0lJTmNQRTBjK3BBU293Q2dZSUtvWkl6ajBFQXdJd0l6RWhNQjhHQTFVRUF3d1kKYXpOekxXTnNhV1Z1ZEMxallVQXhOak0yTURJd05Ea3pNQjRYRFRJeE1URXdOREV3TURneE0xb1hEVEl5TVRFdwpOREV3TURneE0xb3dNREVYTUJVR0ExVUVDaE1PYzNsemRHVnRPbTFoYzNSbGNuTXhGVEFUQmdOVkJBTVRESE41CmMzUmxiVHBoWkcxcGJqQlpNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VIQTBJQUJQeWR6dWlEOCtwcWQ5YUcKWmcwMnBOdVFQUy9YQkNYdmNBV2hQQ0dSK0ptNCtXTVVjLzFpVXlUYzNxTEYxTUFDdmVseUFZWCtpZDRISDQ5QgovMStDMm5halNEQkdNQTRHQTFVZER3RUIvd1FFQXdJRm9EQVRCZ05WSFNVRUREQUtCZ2dyQmdFRkJRY0RBakFmCkJnTlZIU01FR0RBV2dCUkFxWFVPZWxsUDR3aVlwNEVQTFNWamFwK2QrakFLQmdncWhrak9QUVFEQWdOSUFEQkYKQWlFQTJ1NnNzbThQZGIzejh3TTFybGZvdFhRSFF0ZjlIU1lxUHVvY2t5TjFIdndDSUNXSGRiUW0rbVhZVGpWagpTUjlPMmRHcm9ucy9hN2tvaFdrRDFuUzZCYUxNCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJkekNDQVIyZ0F3SUJBZ0lCQURBS0JnZ3Foa2pPUFFRREFqQWpNU0V3SHdZRFZRUUREQmhyTTNNdFkyeHAKWlc1MExXTmhRREUyTXpZd01qQTBPVE13SGhjTk1qRXhNVEEwTVRBd09ERXpXaGNOTXpFeE1UQXlNVEF3T0RFegpXakFqTVNFd0h3WURWUVFEREJock0zTXRZMnhwWlc1MExXTmhRREUyTXpZd01qQTBPVE13V1RBVEJnY3Foa2pPClBRSUJCZ2dxaGtqT1BRTUJCd05DQUFRUU1TdGF5YUlKVitLMTRnaHdyN0VnSDc3dERtVDlFVTJZQXhkSWZtcXkKM2hyYURwTWpZZkw1ZW11MXc2T0xWRXRxdTNubEhsU05kM3lIanJwNjExSjFvMEl3UURBT0JnTlZIUThCQWY4RQpCQU1DQXFRd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVVFLbDFEbnBaVCtNSW1LZUJEeTBsClkycWZuZm93Q2dZSUtvWkl6ajBFQXdJRFNBQXdSUUloQUtHZjdjNVhtK1JFY1l1WERYOXdvWGdibmtLakRwbEUKdzVGdjJ2UWdsZGpnQWlBVWtUOHpmOTZCb2Z2bDdkNzFQdDRUL0syQ0lNak1ENW1IeHRQR2RkNjRkUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
    client-key-data: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSUVERExaTjBmcnZhNndKV1RNOHN5TkwrSnBUM09XU05sdVdjVWRJbEtvZEZvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFL0ozTzZJUHo2bXAzMW9abURUYWsyNUE5TDljRUplOXdCYUU4SVpING1iajVZeFJ6L1dKVApKTnplb3NYVXdBSzk2WElCaGY2SjNnY2ZqMEgvWDRMYWRnPT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=
PS C:\Users\jack> k3d.exe node
Manage node(s)

Usage:
  k3d node [flags]
  k3d node [command]

Available Commands:
  create      Create a new k3s node in docker
  delete      Delete node(s).
  edit        [EXPERIMENTAL] Edit node(s).
  list        List node(s)
  start       Start an existing k3d node
  stop        Stop an existing k3d node

Flags:
  -h, --help   help for node

Global Flags:
      --timestamps   Enable Log timestamps
      --trace        Enable super verbose output (trace logging)
      --verbose      Enable verbose output (debug logging)

Use "k3d node [command] --help" for more information about a command.
PS C:\Users\jack> k3d.exe node list
NAME                ROLE           CLUSTER   STATUS
k3d-clus-server-0   server         clus      exited
k3d-clus-serverlb   loadbalancer   clus      exited
PS C:\Users\jack> k3d.exe node edit
Error: accepts 1 arg(s), received 0
Usage:
  k3d node edit NODE [flags]

Aliases:
  edit, update

Flags:
  -h, --help                                                               help for edit
      --port-add [HOST:][HOSTPORT:]CONTAINERPORT[/PROTOCOL][@NODEFILTER]   [EXPERIMENTAL] (serverlb only!) Map ports from the node container to the host (Format: [HOST:][HOSTPORT:]CONTAINERPORT[/PROTOCOL][@NODEFILTER])
                                                                            - Example: `k3d node edit k3d-mycluster-serverlb --port-add 8080:80`

Global Flags:
      --timestamps   Enable Log timestamps
      --trace        Enable super verbose output (trace logging)
      --verbose      Enable verbose output (debug logging)

FATA[0000] accepts 1 arg(s), received 0
PS C:\Users\jack> k3d.exe registry
Manage registry/registries

Usage:
  k3d registry [flags]
  k3d registry [command]

Aliases:
  registry, registries, reg

Available Commands:
  create      Create a new registry
  delete      Delete registry/registries.
  list        List registries

Flags:
  -h, --help   help for registry

Global Flags:
      --timestamps   Enable Log timestamps
      --trace        Enable super verbose output (trace logging)
      --verbose      Enable verbose output (debug logging)

Additional help topics:
  k3d registry
  k3d registry

Use "k3d registry [command] --help" for more information about a command.
PS C:\Users\jack> k3d.exe registry list
NAME   ROLE   CLUSTER   STATUS
PS C:\Users\jack> k3d.exe version
k3d version v5.0.3
k3s version v1.21.5-k3s2 (default)
PS C:\Users\jack>
#+END_SRC

* docker with k3d

#+BEGIN_SRC 
PS C:\Users\jack> docker

Usage:  docker [OPTIONS] COMMAND

A self-sufficient runtime for containers

Options:
      --config string      Location of client config files (default
                           "C:\\Users\\jack\\.docker")
  -c, --context string     Name of the context to use to connect to the
                           daemon (overrides DOCKER_HOST env var and
                           default context set with "docker context use")
  -D, --debug              Enable debug mode
  -H, --host list          Daemon socket(s) to connect to
  -l, --log-level string   Set the logging level
                           ("debug"|"info"|"warn"|"error"|"fatal")
                           (default "info")
      --tls                Use TLS; implied by --tlsverify
      --tlscacert string   Trust certs signed only by this CA (default
                           "C:\\Users\\jack\\.docker\\ca.pem")
      --tlscert string     Path to TLS certificate file (default
                           "C:\\Users\\jack\\.docker\\cert.pem")
      --tlskey string      Path to TLS key file (default
                           "C:\\Users\\jack\\.docker\\key.pem")
      --tlsverify          Use TLS and verify the remote
  -v, --version            Print version information and quit

Management Commands:
  builder     Manage builds
  buildx*     Build with BuildKit (Docker Inc., v0.6.3)
  compose*    Docker Compose (Docker Inc., v2.0.0)
  config      Manage Docker configs
  container   Manage containers
  context     Manage contexts
  image       Manage images
  manifest    Manage Docker image manifests and manifest lists
  network     Manage networks
  node        Manage Swarm nodes
  plugin      Manage plugins
  scan*       Docker Scan (Docker Inc., v0.8.0)
  secret      Manage Docker secrets
  service     Manage services
  stack       Manage Docker stacks
  swarm       Manage Swarm
  system      Manage Docker
  trust       Manage trust on Docker images
  volume      Manage volumes

Commands:
  attach      Attach local standard input, output, and error streams to a running container
  build       Build an image from a Dockerfile
  commit      Create a new image from a container's changes
  cp          Copy files/folders between a container and the local filesystem
  create      Create a new container
  diff        Inspect changes to files or directories on a container's filesystem
  events      Get real time events from the server
  exec        Run a command in a running container
  export      Export a container's filesystem as a tar archive
  history     Show the history of an image
  images      List images
  import      Import the contents from a tarball to create a filesystem image
  info        Display system-wide information
  inspect     Return low-level information on Docker objects
  kill        Kill one or more running containers
  load        Load an image from a tar archive or STDIN
  login       Log in to a Docker registry
  logout      Log out from a Docker registry
  logs        Fetch the logs of a container
  pause       Pause all processes within one or more containers
  port        List port mappings or a specific mapping for the container
  ps          List containers
  pull        Pull an image or a repository from a registry
  push        Push an image or a repository to a registry
  rename      Rename a container
  restart     Restart one or more containers
  rm          Remove one or more containers
  rmi         Remove one or more images
  run         Run a command in a new container
  save        Save one or more images to a tar archive (streamed to STDOUT by default)
  search      Search the Docker Hub for images
  start       Start one or more stopped containers
  stats       Display a live stream of container(s) resource usage statistics
  stop        Stop one or more running containers
  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
  top         Display the running processes of a container
  unpause     Unpause all processes within one or more containers
  update      Update configuration of one or more containers
  version     Show the Docker version information
  wait        Block until one or more containers stop, then print their exit codes

Run 'docker COMMAND --help' for more information on a command.

To get more help with docker, check out our guides at https://docs.docker.com/go/guides/
PS C:\Users\jack>
#+END_SRC

* kubectl with k3d

#+BEGIN_SRC 
PS C:\WINDOWS\system32> kubectl
kubectl controls the Kubernetes cluster manager.

 Find more information at: https://kubernetes.io/docs/reference/kubectl/overview/

Basic Commands (Beginner):
  create        Create a resource from a file or from stdin
  expose        Take a replication controller, service, deployment or pod and expose it as a new Kubernetes service
  run           Run a particular image on the cluster
  set           Set specific features on objects

Basic Commands (Intermediate):
  explain       Get documentation for a resource
  get           Display one or many resources
  edit          Edit a resource on the server
  delete        Delete resources by file names, stdin, resources and names, or by resources and label selector

Deploy Commands:
  rollout       Manage the rollout of a resource
  scale         Set a new size for a deployment, replica set, or replication controller
  autoscale     Auto-scale a deployment, replica set, stateful set, or replication controller

Cluster Management Commands:
  certificate   Modify certificate resources.
  cluster-info  Display cluster information
  top           Display resource (CPU/memory) usage
  cordon        Mark node as unschedulable
  uncordon      Mark node as schedulable
  drain         Drain node in preparation for maintenance
  taint         Update the taints on one or more nodes

Troubleshooting and Debugging Commands:
  describe      Show details of a specific resource or group of resources
  logs          Print the logs for a container in a pod
  attach        Attach to a running container
  exec          Execute a command in a container
  port-forward  Forward one or more local ports to a pod
  proxy         Run a proxy to the Kubernetes API server
  cp            Copy files and directories to and from containers
  auth          Inspect authorization
  debug         Create debugging sessions for troubleshooting workloads and nodes

Advanced Commands:
  diff          Diff the live version against a would-be applied version
  apply         Apply a configuration to a resource by file name or stdin
  patch         Update fields of a resource
  replace       Replace a resource by file name or stdin
  wait          Experimental: Wait for a specific condition on one or many resources
  kustomize     Build a kustomization target from a directory or URL.

Settings Commands:
  label         Update the labels on a resource
  annotate      Update the annotations on a resource
  completion    Output shell completion code for the specified shell (bash or zsh)

Other Commands:
  api-resources Print the supported API resources on the server
  api-versions  Print the supported API versions on the server, in the form of "group/version"
  config        Modify kubeconfig files
  plugin        Provides utilities for interacting with plugins
  version       Print the client and server version information

Usage:
  kubectl [flags] [options]

Use "kubectl <command> --help" for more information about a given command.
Use "kubectl options" for a list of global command-line options (applies to all commands).
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl version
Client Version: version.Info{Major:"1", Minor:"22", GitVersion:"v1.22.3", GitCommit:"c92036820499fedefec0f847e2054d824aea6cd1", GitTreeState:"clean", BuildDate:"2021-10-27T18:41:28Z", GoVersion:"go1.16.9", Compiler:"gc", Platform:"windows/amd64"}
Server Version: version.Info{Major:"1", Minor:"21", GitVersion:"v1.21.5+k3s2", GitCommit:"724ef700bab896ff252a75e2be996d5f4ff1b842", GitTreeState:"clean", BuildDate:"2021-10-05T19:59:14Z", GoVersion:"go1.16.8", Compiler:"gc", Platform:"linux/amd64"}
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl.exe get all
NAME            READY   STATUS             RESTARTS   AGE
pod/n1          1/1     Running            0          9m14s
pod/n2          1/1     Running            0          9m10s
pod/busybox     0/1     Completed          0          6m7s
pod/hazelcast   0/1     ImagePullBackOff   0          6m28s

NAME                 TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
service/kubernetes   ClusterIP   10.43.0.1    <none>        443/TCP   15h
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl.exe config view
apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: DATA+OMITTED
    server: https://192.168.99.100:8443
  name: 192-168-99-100:8443
- cluster:
    certificate-authority-data: DATA+OMITTED
    server: https://192.168.99.101:8443
  name: 192-168-99-101:8443
- cluster:
    certificate-authority-data: DATA+OMITTED
    server: https://0.0.0.0:2118
  name: k3d-clus
contexts:
- context:
    cluster: k3d-clus
    user: admin@k3d-clus
  name: k3d-clus
- context:
    cluster: 192-168-99-100:8443
    namespace: myproject
    user: system:admin/192-168-99-100:8443
  name: myproject/192-168-99-100:8443/system:admin
- context:
    cluster: 192-168-99-101:8443
    namespace: myproject
    user: system:admin/192-168-99-101:8443
  name: myproject/192-168-99-101:8443/system:admin
current-context: k3d-clus
kind: Config
preferences: {}
users:
- name: admin@k3d-clus
  user:
    client-certificate-data: REDACTED
    client-key-data: REDACTED
- name: system:admin/192-168-99-101:8443
  user:
    client-certificate-data: REDACTED
    client-key-data: REDACTED
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl.exe cluster-info
Kubernetes control plane is running at https://0.0.0.0:2118
CoreDNS is running at https://0.0.0.0:2118/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy
Metrics-server is running at https://0.0.0.0:2118/api/v1/namespaces/kube-system/services/https:metrics-server:/proxy

To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.
#+END_SRC
