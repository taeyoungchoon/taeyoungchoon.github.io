* so

- openstack to me, small aws
- 다 알 수 있을까? 모두 다 말이다. 귀신인가? 아니면 Hermione's Secret과 같을까? 손오공의 분실술? clone 복제의 기술, 아는데까지 인간으로 나로서 '나-너-우리' 로 할 수 있는 정도까지가 아닐까? 그래 그 정도까지다.
- so, words or pre

* pre

1. linux
2. network
3. not the linux or not the network
4. just let it go

* words

** word.g(roup) but near pure openstack rel

- ui called horizon
- nova, abstact box, sdc, compute
- neutron but contrail, sdn, network
- cinder, pure
- swift, object, s3, sds, storage
- glance
- ceph
- ironic, baremetal 

** openstack network, quantum, neutron

- some kinds of

** network

- lldp
- c class, 172.20.6.0/23 168.126.63.1 8.8.8.8 192.168.100.0/24 class
- stp? why? rstrp bpdu

- mon night
* network, network, network

- bridge, tap?
- eth0, em0, nic1, veth(virtual ethernet)
- vlan
- vxlan
- mpls
- api network, tenent network, provisioning network, pxe, tftp, storage network
- juniper qfe5000
- big switch
- cisco
- cumurus?
- openflow
- jabber protocol
- bgp then bgpx
- pxe, tftp, dhcp is the application to someone
- uuid
- neutron with contrail
- neutron only

* deploy with director(tripleO), server manager(using ubuntu), devstack, fuel or marintas?

- undercloud to overcloud to do service on it
- https://access.redhat.com/documentation/ko-kr/red_hat_openstack_platform/11/html-single/director_installation_and_usage/

* what about docker, container, lxc
* multiple openstack
* openstack on sinle image or few images

- devstack

* with vagrant
* cli

su - stack
. stackrc

openstack x y z
openstack x y z -c id -f cvs
openstack x y z -c id -f cvs | sed 's/^/openstack x y id/' 
openstack x y z -c id -f cvs | sed 's/^/openstack x y id/' | sh

fping -g 1.1.1.10 1.1.1.15

swatch

watch

ls -tlr

tail -f /var/log/*/*.log

ssh heat-admin@x

openstack baremetal delete 8f79ffb4-a113-44b0-8eca-fb870c580a7a
openstack baremetal node delete e5033df5-5ee2-4cb3-a834-b09623f9cbd2
openstack baremetal import --json ~/instackenv.json
openstack baremetal introspection data save
openstack baremetal introspection data save 0070eb8b-a4e8-4ce5-b39e-9d381d378327|jq .
openstack baremetal node list
openstack baremetal node manage 294a02b5-24f0-4b6c-b749-7cdaa4c5b8e2
openstack baremetal node power off 9cad6ce8-cc9d-4293-aa8e-68f334e4fa6e
openstack baremetal node set --property capabilities='profile:compute,node:compute-0,boot_option:local' 09965b81-c2fa-483f-9a34-2dc9bd8c221b
openstack flavor delete contrailanalyticsdatabase contrailcontroller contrailanalytics
openstack flavor list
openstack net list
openstack overcloud
openstack overcloud introspect 09965b81-c2fa-483f-9a34-2dc9bd8c221b --provider
openstack overcloud node data save 0070eb8b-a4e8-4ce5-b39e-9d381d378327|jq .
openstack overcloud node import ./instackenv2.json
openstack overcloud node introspect 09965b81-c2fa-483f-9a34-2dc9bd8c221b --provider
openstack overcloud node introspect --all-manageable --provide
openstack overcloud profiles list
openstack port list
openstack stack delete 9906c84d-4e55-46a6-97f1-f7dd14975155 --y
openstack stack delete overcloud --y
openstack stack list
watch -d 'openstack stack list --nested|grep -v COMP'
nova list
ssh heat-admin@overcloud-contrailanalytics-0
vi .ssh/known_hosts 
./create_stack.sh
systemctl status neutron-dhcp-agent
tail -f overcloud_deploy.log
ssh heat-admin@172.168.10.18
tail -f overcloud_deploy.log|egrep -i 'error|warn|fail'
ssh-copy-id -i ~/.ssh/id_rsa.pub root@172.168.10.100
vi ~/.ssh/known_hosts 
for i in d3545415-e1d5-4968-97b7-fe7306efdc55 ab121761-80de-4cb9-8912-438ae0f20298 6b0ea6e1-c539-4b18-a8c8-4c4f9748f12d; do nova delete $i; done

  960  cat vncserver.sh 
  961  vncserver :1 -geometry 1600x1200
  962  vncserver -list
  963  cd /root/.vnc/
  965  cat xstartup 
  967  vi /etc/X11/xinit/xinitrc

neutron subnet-list
  937  for i in {Contrail-Controller,Contrail-Analytics,Contrail-Analytics-Database,controll}; do virsh -c qemu+ssh://root@192.168.50.206/system domiflist overcloud-node0$i | awk '$3 == "provisioning" {print $5};'; done > /tmp/nodes.txt
  635  ipmitool -I lanplus -H 172.168.0.11 -L ADMINISTRATOR -U admin -R 3 -N 5 -f /tmp/tmpTIjtfp power status

openstack user list -c Name -f value | sed 's/^/openstack user show /'  | sh

* enroll

** case

Failed to validate power driver interface for node 33e2be52-418c-49eb-8932-11ee712b09f4.
Error: SSH connection cannot be established: Failed to establish SSH connection to host 1.1.10.233.

** dig

/usr/lib/python2.7/site-packages/ironic/common/exception.py

    414 class SSHConnectFailed(IronicException):
    415     _msg_fmt = _("Failed to establish SSH connection to host %(host)s.")

# grep SSHConnectFailed * | grep -v Binary
grep: glance_serviceexception.py:class SSHConnectFailed(IronicException):
: Is a directory
utils.py:    :raises: SSHConnectFailed
utils.py:        raise exception.SSHConnectFailed(host=connection.get('host'))

def ssh_connect(connection):
    """Method to connect to a remote system using ssh protocol.

    :param connection: a dict of connection parameters.
    :returns: paramiko.SSHClient -- an active ssh connection.
    :raises: SSHConnectFailed

    """
    try:
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        key_contents = connection.get('key_contents')
        if key_contents:
            data = six.moves.StringIO(key_contents)
            if "BEGIN RSA PRIVATE" in key_contents:
                pkey = paramiko.RSAKey.from_private_key(data)
            elif "BEGIN DSA PRIVATE" in key_contents:
                pkey = paramiko.DSSKey.from_private_key(data)
            else:
                # Can't include the key contents - secure material.
                raise ValueError(_("Invalid private key"))
        else:
            pkey = None
        ssh.connect(connection.get('host'),
                    username=connection.get('username'),
                    password=connection.get('password'),
                    port=connection.get('port', 22),
                    pkey=pkey,
                    key_filename=connection.get('key_filename'),
                    timeout=connection.get('timeout', 10))

        # send TCP keepalive packets every 20 seconds
        ssh.get_transport().set_keepalive(20)
    except Exception as e:
        LOG.debug("SSH connect failed: %s" % e)
        raise exception.SSHConnectFailed(host=connection.get('host'))

    return ssh


[stack@osp10dir01 paramiko]$ ssh -i ~/.ssh/id_rsa root@1.1.10.230 "rpm -qa | grep -i openssh-server"
openssh-server-7.4p1-11.el7.x86_64
[stack@osp10dir01 paramiko]$ ssh -i ~/.ssh/id_rsa root@1.1.10.232 "rpm -qa | grep -i openssh-server"
openssh-server-7.4p1-11.el7.x86_64
[stack@osp10dir01 paramiko]$ ssh -i ~/.ssh/id_rsa root@1.1.10.233 "rpm -qa | grep -i openssh-server"
openssh-server-7.4p1-16.el7.x86_64

[stack@osp10dir01 paramiko]$ ssh -i ~/.ssh/id_rsa root@1.1.10.233 "cat /etc/redhat-release"
Red Hat Enterprise Linux Server release 7.5 (Maipo)
[stack@osp10dir01 paramiko]$ ssh -i ~/.ssh/id_rsa root@1.1.10.232 "cat /etc/redhat-release"
Red Hat Enterprise Linux Server release 7.4 (Maipo)
[stack@osp10dir01 paramiko]$ ssh -i ~/.ssh/id_rsa root@1.1.10.230 "cat /etc/redhat-release"
Red Hat Enterprise Linux Server release 7.4 (Maipo)
[stack@osp10dir01 paramiko]$ 
* another

    def _do_node_verify(self, task):
        """Internal method to perform power credentials verification."""
        node = task.node
        LOG.debug('Starting power credentials verification for node %s',
                  node.uuid)

        error = None
        try:
            task.driver.power.validate(task)
        except Exception as e:
            error = (_('Failed to validate power driver interface for node '
                       '%(node)s. Error: %(msg)s') %
                     {'node': node.uuid, 'msg': e})
        else:
            try:
                power_state = task.driver.power.get_power_state(task)
            except Exception as e:
                error = (_('Failed to get power state for node '
                           '%(node)s. Error: %(msg)s') %
                         {'node': node.uuid, 'msg': e})

        if error is None:
            node.power_state = power_state
            task.process_event('done')
        else:
            LOG.error(error)
            node.last_error = error
            task.process_event('fail')
            node.target_provision_state = None
            node.save()

** normal

Jul 10 18:56:07 localhost sshd[32100]: Accepted publickey for root from 1.1.10.51 port 55984 ssh2: RSA SHA256:XlYW9SY9pv58fdQv6EU9RwQLSkXuLLHAdqdVuXGyV2o
Jul 10 18:56:07 localhost sshd[32100]: pam_unix(sshd:session): session opened for user root by (uid=0)


Jul 10 18:56:41 localhost sshd[32100]: Received disconnect from 1.1.10.51 port 55984:11: disconnected by user
Jul 10 18:56:41 localhost sshd[32100]: Disconnected from 1.1.10.51 port 55984
Jul 10 18:56:41 localhost sshd[32100]: pam_unix(sshd:session): session closed for user root

** and 

Jul 10 16:41:53 localhost sshd[30163]: Connection closed by 1.1.10.51 port 44620 [preauth]
Jul 10 16:41:54 localhost sshd[30165]: Connection closed by 1.1.10.51 port 44622 [preauth]
Jul 10 16:41:54 localhost sshd[30167]: Connection closed by 1.1.10.51 port 44624 [preauth]
Jul 10 16:41:56 localhost sshd[30169]: Connection closed by 1.1.10.51 port 44640 [preauth]
Jul 10 16:41:56 localhost sshd[30171]: Connection closed by 1.1.10.51 port 44644 [preauth]
Jul 10 16:41:56 localhost sshd[30173]: Connection closed by 1.1.10.51 port 44648 [preauth]
* debugging general

https://ask.openstack.org/en/question/148/how-do-i-debug-openstack/
https://docs.openstack.org/operations-guide/index.html

* TODO debugging about network

https://docs.openstack.org/operations-guide/ops-network-troubleshooting.html

- ip a
- ip a | grep state
- ovs-ofctl show br-int
- ovs-ofctl dump-flows br-eth1 | grep 2113
- ovs-vsctl show | grep -A 3 -e Port\ \"gre-
- neutron net-show --fields provider:segmentation_id <network name>
- ovs-ofctl dump-flows br-tun | grep 0x3
- ip netns exec qrouter-e52x-x-x-x-x ip a | grep state
- tcpdump -i any -n -v 'icmp[icmptype] = icmp-echoreply or icmp[icmptype] = icmp-echo'
- iptables
- iptables-save
- mysql> select uuid from instance where hostname = 'hostname';
- mysql> select * from fixed_ips where instance_uuid = '<uuid>';
- mysql> select * from floating_ips where fixed_ip_id = '<fixed_ip_id>';
- openstack console log show <instance nane or uuid>
- ps aux | grep dnsmasq
- tcpdump -i br100 -n port 67 or port 68
- host openstack.org
- ping openstack.org
- tcpdump -i br100 -n -v udp port 53
- ovs-vsctl list-br
- ovs-vsctl list-ports eth1-br
- ip netns
- openstack server list --all-project | grep 'IP-ADDRESS'
- openstack subnet list
- easyOVS
- Don
