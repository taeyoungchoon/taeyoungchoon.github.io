* TODO execute permission required

#+BEGIN_SRC 
[root@two tmp]# date
Tue Oct  1 17:02:58 KST 2019
[root@two tmp]# crontab -l
* *  *  *  * /tmp/every-minute-by-etc-crontab-file.sh
[root@two tmp]# cat every-minute-by-etc-crontab-file.log
20191001.170001
20191001.170101
20191001.170201
20191001.170302
#+END_SRC

#+BEGIN_SRC 
[root@two tmp]# ls -l /etc/cron.hourly/
total 12
-rwxr-xr-x. 1 root root 392 Apr 11  2018 0anacron
-rwxr-xr-x. 1 root root  67 Oct  1 16:51 hourly-by-etc-cron.hourly.sh
-rw-r--r--. 1 root root  83 Oct  1 16:52 hourly-by-etc-cron.hourly-without-execute.sh
[root@two tmp]# ls -l /tmp/hourly*
-rw-r--r--. 1 root root 16 Oct  1 17:01 /tmp/hourly-by-etc-cron.hourly.log
[root@two tmp]# cat /tmp/hourly-by-etc-cron.hourly.log
20191001.170101
#+END_SRC

#+BEGIN_SRC 
[root@two tmp]# tail -30 /var/log/cron
Oct  1 08:00:01 localhost CROND[3294]: (root) CMD (/tmp/every-minute-by-etc-crontab-file.sh)
Oct  1 08:01:01 localhost CROND[3313]: (root) CMD (/tmp/every-minute-by-etc-crontab-file.sh)
Oct  1 08:01:01 localhost CROND[3314]: (root) CMD (run-parts /etc/cron.hourly)
Oct  1 08:01:01 localhost run-parts(/etc/cron.hourly)[3314]: starting hourly-by-etc-cron.hourly.sh
Oct  1 08:01:01 localhost run-parts(/etc/cron.hourly)[3334]: finished hourly-by-etc-cron.hourly.sh
Oct  1 08:02:01 localhost CROND[3360]: (root) CMD (/tmp/every-minute-by-etc-crontab-file.sh)
Oct  1 08:03:02 localhost CROND[3392]: (root) CMD (/tmp/every-minute-by-etc-crontab-file.sh)
[root@two tmp]#
#+END_SRC

* DONE cron.allow and cron.deny
  CLOSED: [2019-05-02 ëª© 13:05]

- lisping

#+BEGIN_SRC emacs-lisp
((cron.allow nil)(cron.deny nil) t) ;; no good for security
((cron.allow t)(cron.deny nil) cron.allow) ;; blacklist always fail
((cron.allow nil)(cron.deny t) (- t cron.deny)) ;; love white and clear
((cron.allow t)(cron.deny t) cron.allow) ;; love white
#+END_SRC

- cron.allow first, if ok then ok, if not then nil
  cron.allow only work, if two file exist!

#+BEGIN_SRC 
[root@c75 ~]# cat /etc/cron.allow
jack
[root@c75 ~]# cat /etc/cron.deny
jack
[root@c75 ~]# su - jack
Last login: Tue Apr 30 21:07:00 KST 2019 on pts/0
[jack@c75 ~]$ crontab -l
x * * * * /usr/bin/date > /tmp/date.log
[jack@c75 ~]$ logout
[root@c75 ~]# su - raul
Last login: Tue Apr 30 21:07:15 KST 2019 on pts/0
[raul@c75 ~]$ crontab -l
You (raul) are not allowed to use this program (crontab)
See crontab(1) for more information
[raul@c75 ~]$
#+END_SRC

- [X] if account locked, what happed to ever registered req? working

#+BEGIN_SRC 
==> jack.log <==
Thu May  2 04:06:01 CEST 2019

==> raul.log <==
Thu May  2 04:06:01 CEST 2019
#+END_SRC

#+BEGIN_SRC 
[root@c63 tmp]# echo jack > /etc/cron.allow
#+END_SRC

#+BEGIN_SRC 
==> jack.log <==
Thu May  2 04:07:01 CEST 2019

==> raul.log <==
Thu May  2 04:07:01 CEST 2019
#+END_SRC

- after reboot, working

* name?

check out the wikipedia

* /var/log/cron
* /var/spool/cron/ 
* execute failure

- check PATH of 
- cat /etc/crontab
- read mail using mail command or you like or are using

* 600 server at 4am

kill some 'one' 

** using sleep and $RANDOM

*** chk

$ time sleep $(expr $RANDOM % 3)

real    0m0.004s
user    0m0.001s
sys     0m0.002s
$ time sleep $(expr $RANDOM % 3)

real    0m2.003s
user    0m0.000s
sys     0m0.002s
$ time sleep $(expr $RANDOM % 3)

real    0m2.004s
user    0m0.000s
sys     0m0.003s
$ time sleep $(expr $RANDOM % 3)

real    0m1.003s
user    0m0.000s
sys     0m0.003s

*** real one, add 10m (60s * 10)

10 4 * * * sleep $(expr $RANDOM \% 600); ~/bin/batch_job

*** site

- http://www.askbjoernhansen.com/2007/11/19/space_out_cronjobs.html

