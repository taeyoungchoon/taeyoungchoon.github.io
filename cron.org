* DONE execute permission required

#+BEGIN_SRC 
[root@two tmp]# date
Tue Oct  1 17:02:58 KST 2019
[root@two tmp]# crontab -l
x *  *  *  * /tmp/every-minute-by-etc-crontab-file.sh
[root@two tmp]# cat every-minute-by-etc-crontab-file.log
20191001.170001
20191001.170101
20191001.170201
20191001.170302
#+END_SRC

#+BEGIN_SRC 
[root@two tmp]# ls -l /etc/cron.hourly/
total 12
-rwxr-xr-x. 1 root root 392 Apr 11  2018 0anacron
-rwxr-xr-x. 1 root root  67 Oct  1 16:51 hourly-by-etc-cron.hourly.sh
-rw-r--r--. 1 root root  83 Oct  1 16:52 hourly-by-etc-cron.hourly-without-execute.sh
[root@two tmp]# ls -l /tmp/hourly*
-rw-r--r--. 1 root root 16 Oct  1 17:01 /tmp/hourly-by-etc-cron.hourly.log
[root@two tmp]# cat /tmp/hourly-by-etc-cron.hourly.log
20191001.170101
#+END_SRC

#+BEGIN_SRC 
[root@two tmp]# tail -30 /var/log/cron
Oct  1 08:00:01 localhost CROND[3294]: (root) CMD (/tmp/every-minute-by-etc-crontab-file.sh)
Oct  1 08:01:01 localhost CROND[3313]: (root) CMD (/tmp/every-minute-by-etc-crontab-file.sh)
Oct  1 08:01:01 localhost CROND[3314]: (root) CMD (run-parts /etc/cron.hourly)
Oct  1 08:01:01 localhost run-parts(/etc/cron.hourly)[3314]: starting hourly-by-etc-cron.hourly.sh
Oct  1 08:01:01 localhost run-parts(/etc/cron.hourly)[3334]: finished hourly-by-etc-cron.hourly.sh
Oct  1 08:02:01 localhost CROND[3360]: (root) CMD (/tmp/every-minute-by-etc-crontab-file.sh)
Oct  1 08:03:02 localhost CROND[3392]: (root) CMD (/tmp/every-minute-by-etc-crontab-file.sh)
[root@two tmp]#
#+END_SRC

* DONE cron.allow and cron.deny
  CLOSED: [2019-05-02 목 13:05]

- lisping

#+BEGIN_SRC emacs-lisp
((cron.allow nil)(cron.deny nil) t) ;; no good for security
((cron.allow t)(cron.deny nil) cron.allow) ;; blacklist always fail
((cron.allow nil)(cron.deny t) (- t cron.deny)) ;; love white and clear
((cron.allow t)(cron.deny t) cron.allow) ;; love white
#+END_SRC

- cron.allow first, if ok then ok, if not then nil
  cron.allow only work, if two file exist!

#+BEGIN_SRC 
[root@c75 ~]# cat /etc/cron.allow
jack
[root@c75 ~]# cat /etc/cron.deny
jack
[root@c75 ~]# su - jack
Last login: Tue Apr 30 21:07:00 KST 2019 on pts/0
[jack@c75 ~]$ crontab -l
x * * * * /usr/bin/date > /tmp/date.log
[jack@c75 ~]$ logout
[root@c75 ~]# su - raul
Last login: Tue Apr 30 21:07:15 KST 2019 on pts/0
[raul@c75 ~]$ crontab -l
You (raul) are not allowed to use this program (crontab)
See crontab(1) for more information
[raul@c75 ~]$
#+END_SRC

- [X] if account locked, what happed to ever registered req? working

#+BEGIN_SRC 
==> jack.log <==
Thu May  2 04:06:01 CEST 2019

==> raul.log <==
Thu May  2 04:06:01 CEST 2019
#+END_SRC

#+BEGIN_SRC 
[root@c63 tmp]# echo jack > /etc/cron.allow
#+END_SRC

#+BEGIN_SRC 
==> jack.log <==
Thu May  2 04:07:01 CEST 2019

==> raul.log <==
Thu May  2 04:07:01 CEST 2019
#+END_SRC

- after reboot, working

* name?

check out the wikipedia

* /var/log/cron
* /var/spool/cron/ 
* execute failure

- check PATH of 
- cat /etc/crontab
- read mail using mail command or you like or are using

* 600 server at 4am

kill some 'one' 

** using sleep and $RANDOM

*** chk

#+begin_src bash
  $ time sleep $(expr $RANDOM % 3)

  real    0m0.004s
  user    0m0.001s
  sys     0m0.002s
  $ time sleep $(expr $RANDOM % 3)

  real    0m2.003s
  user    0m0.000s
  sys     0m0.002s
  $ time sleep $(expr $RANDOM % 3)

  real    0m2.004s
  user    0m0.000s
  sys     0m0.003s
  $ time sleep $(expr $RANDOM % 3)

  real    0m1.003s
  user    0m0.000s
  sys     0m0.003s
#+end_src

*** real one, add 10m (60s * 10)

#+begin_src bash
10 4 * * * sleep $(expr $RANDOM \% 600); ~/bin/batch_job
#+end_src

*** site

- http://www.askbjoernhansen.com/2007/11/19/space_out_cronjobs.html

* TODO and anacron
* DONE [2023-11-23 목] simply

** allowed to run or not

*** /usr/bin/crontab

- user and group
  - root root
- permission
  - -rwsr-xr-x.
    - 4755
    - [ ] about dot(.)
    - others can execute with setuid
      - so be 'root'
    
*** /var/spool/cron

- user and group
  - root root
- permission
  - drwx------
    - root (even others, cause setuid set on /usr/bin/crontab) can write here as some
      #+begin_src bash
	? ls -al
	drwx------. 2 root root 82 Nov 23 00:05 .
	-rw-------. 1 jack jack 78 Nov 22 23:41 jack
	-rw-------. 1 root root 15 Nov 23 00:05 root
      #+end_src

** selinux

- sestatus

** others like secure os

- redcastle

** right allow and deny using cron.allow and cron.deny then check

*** prefered way (/etc/cron.deny exist)

- allowed users at /etc/cron.allow

#+begin_src bash
  ? id
  uid=0(root) gid=0(root) groups=0(root) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
  ? ls -al /etc/cron.deny /etc/cron.allow
  -rw-------. 1 root root 5 Nov 23 00:08 /etc/cron.allow
  -rw-------. 1 root root 0 Nov 23 00:08 /etc/cron.deny
  ? egrep 'jack|raul' /etc/cron.allow
  jack
  ? egrep 'jack|raul' /etc/cron.deny
  ? su - jack -c 'crontab -l'
  ,* * * * * printenv PATH > /tmp/cron.printenv
  ,* * * * * date >> /tmp/cron.date
  ? su - raul -c 'crontab -l'
  You (raul) are not allowed to use this program (crontab)
  See crontab(1) for more information
  ?
#+end_src

*** suggested by file(/etc/cron.deny exist)

- denied user at /etc/cron.deny

#+begin_src bash
  ? id
  uid=0(root) gid=0(root) groups=0(root) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
  ? ls -al /etc/cron.deny /etc/cron.allow
  ls: cannot access /etc/cron.allow: No such file or directory
  -rw-------. 1 root root 5 Nov 22 23:43 /etc/cron.deny
  ? egrep 'jack|raul' /etc/cron.deny
  raul
  ? su - jack -c 'crontab -l'
  ,* * * * * printenv PATH > /tmp/cron.printenv
  ,* * * * * date >> /tmp/cron.date
  ? su - raul -c 'crontab -l'
  You (raul) are not allowed to use this program (crontab)
  See crontab(1) for more information
  ?
#+end_src

** broken /usr/bin/crontab permission

- setuid removed

#+begin_src bash
  ? ls -al /usr/bin/crontab
  -rwsr-xr-x. 1 root root 57576 Jan 13  2022 /usr/bin/crontab
  ? chmod 755 /usr/bin/crontab
  ? ls -al /usr/bin/crontab
  -rwxr-xr-x. 1 root root 57576 Jan 13  2022 /usr/bin/crontab
  ? su - jack -c 'crontab -l'
  You (jack) are not allowed to use this program (crontab)
  See crontab(1) for more information
  ? su - raul -c 'crontab -l'
  You (raul) are not allowed to use this program (crontab)
  See crontab(1) for more information
  ?
#+end_src

*** restore permission of cronie

- check first 
  - M: Mode differs (includes permissions and file type)
  - T: mTime differs
- restore
    
#+begin_src bash
  ? rpm -V cronie
  .......T.  c /etc/cron.deny
  .M.......    /usr/bin/crontab
  ? ls -al /usr/bin/crontab
  -rwxr-xr-x. 1 root root 57576 Jan 13  2022 /usr/bin/crontab
  ? rpm --setperms cronie
  ? ls -al /usr/bin/crontab
  -rwsr-xr-x. 1 root root 57576 Jan 13  2022 /usr/bin/crontab
#+end_src

* TODO pam way

- Another  way  to  restrict  access  to  cron  is  to  use  PAM authentication in /etc/security/access.conf to set up users, which are allowed or disallowed to use crontab or modify system cron  jobs in the /etc/cron.d/ directory.
