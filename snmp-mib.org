* DONE general

- https://aristanetworks.force.com/AristaCommunity/s/article/introduction-to-managing-eos-devices-monitoring#Comm_Kna_ka08C0000008Tu2QAE_66
  - The CPU and Memory status can also be found using SNMP. Under the HOST-RESOURCES MIB,
  - switch#sh snmp mib walk 1.3.6.1.2.1.25

* DONE cpu

#+BEGIN_SRC 
arista1#sh snmp mib walk hrDeviceDescr
HOST-RESOURCES-MIB::hrDeviceDescr[1] = STRING: Intel(R) Pentium(R) CPU  @ 1.50GHz
HOST-RESOURCES-MIB::hrDeviceDescr[2] = STRING: Core 1
HOST-RESOURCES-MIB::hrDeviceDescr[3] = STRING: Core 2
HOST-RESOURCES-MIB::hrDeviceDescr[4] = STRING: Core 3
HOST-RESOURCES-MIB::hrDeviceDescr[5] = STRING: Core 4

arista1#sh snmp mib translate hrDeviceDescr
.1.3.6.1.2.1.25.3.2.1.3

arista1#sh snmp mib walk hrProcessorLoad
HOST-RESOURCES-MIB::hrProcessorLoad[1] = INTEGER: 8
HOST-RESOURCES-MIB::hrProcessorLoad[2] = INTEGER: 9
HOST-RESOURCES-MIB::hrProcessorLoad[3] = INTEGER: 8
HOST-RESOURCES-MIB::hrProcessorLoad[4] = INTEGER: 8
HOST-RESOURCES-MIB::hrProcessorLoad[5] = INTEGER: 9

arista1#sh snmp mib translate hrProcessorLoad
.1.3.6.1.2.1.25.3.3.1.2
arista1#

#+END_SRC

* DONE mem

#+BEGIN_SRC 
arista1#sh snmp mib walk hrStorageDescr
HOST-RESOURCES-MIB::hrStorageDescr[1] = STRING: RAM
HOST-RESOURCES-MIB::hrStorageDescr[2] = STRING: RAM (Buffers)
HOST-RESOURCES-MIB::hrStorageDescr[3] = STRING: RAM (Cache)
HOST-RESOURCES-MIB::hrStorageDescr[4] = STRING: Flash
HOST-RESOURCES-MIB::hrStorageDescr[5] = STRING: Tmp
HOST-RESOURCES-MIB::hrStorageDescr[6] = STRING: Root
HOST-RESOURCES-MIB::hrStorageDescr[7] = STRING: Log
HOST-RESOURCES-MIB::hrStorageDescr[8] = STRING: Core
HOST-RESOURCES-MIB::hrStorageDescr[100] = STRING: RAM (Unavailable)

arista1#sh snmp mib translate hrStorageDescr
.1.3.6.1.2.1.25.2.3.1.3

arista1#sh snmp mib walk hrStorageSize
HOST-RESOURCES-MIB::hrStorageSize[1] = INTEGER: 8171992
HOST-RESOURCES-MIB::hrStorageSize[2] = INTEGER: 8171992
HOST-RESOURCES-MIB::hrStorageSize[3] = INTEGER: 8171992
HOST-RESOURCES-MIB::hrStorageSize[4] = INTEGER: 856123
HOST-RESOURCES-MIB::hrStorageSize[5] = INTEGER: 16384
HOST-RESOURCES-MIB::hrStorageSize[6] = INTEGER: 306450
HOST-RESOURCES-MIB::hrStorageSize[7] = INTEGER: 204300
HOST-RESOURCES-MIB::hrStorageSize[8] = INTEGER: 204300
HOST-RESOURCES-MIB::hrStorageSize[100] = INTEGER: 8171992

arista1#sh snmp mib translate hrStorageSize
.1.3.6.1.2.1.25.2.3.1.5

arista1#sh snmp mib walk hrStorageUsed
HOST-RESOURCES-MIB::hrStorageUsed[1] = INTEGER: 5203548
HOST-RESOURCES-MIB::hrStorageUsed[2] = INTEGER: 294224
HOST-RESOURCES-MIB::hrStorageUsed[3] = INTEGER: 3457488
HOST-RESOURCES-MIB::hrStorageUsed[4] = INTEGER: 728017
HOST-RESOURCES-MIB::hrStorageUsed[5] = INTEGER: 0
HOST-RESOURCES-MIB::hrStorageUsed[6] = INTEGER: 24591
HOST-RESOURCES-MIB::hrStorageUsed[7] = INTEGER: 31995
HOST-RESOURCES-MIB::hrStorageUsed[8] = INTEGER: 0
HOST-RESOURCES-MIB::hrStorageUsed[100] = INTEGER: 1847116

arista1#sh snmp mib translate hrStorageUsed
.1.3.6.1.2.1.25.2.3.1.6

#+END_SRC

* DONE temp

#+BEGIN_SRC 
arista1#sh snmp mib walk entPhysicalDescr | grep -i 10000600
ENTITY-MIB::entPhysicalDescr[100006001] = STRING: Digital Temperature Sensor on cpu0
ENTITY-MIB::entPhysicalDescr[100006002] = STRING: Digital Temperature Sensor on cpu1
ENTITY-MIB::entPhysicalDescr[100006003] = STRING: Digital Temperature Sensor on cpu2
ENTITY-MIB::entPhysicalDescr[100006004] = STRING: Digital Temperature Sensor on cpu3
ENTITY-MIB::entPhysicalDescr[100006005] = STRING: Supervisor temp sensor
ENTITY-MIB::entPhysicalDescr[100006006] = STRING: Supervisor front-panel temp sensor
ENTITY-MIB::entPhysicalDescr[100006007] = STRING: Supervisor back-panel temp sensor
ENTITY-MIB::entPhysicalDescr[100006008] = STRING: CPU VRM temp sensor 0
ENTITY-MIB::entPhysicalDescr[100006009] = STRING: CPU VRM temp sensor 1
ENTITY-MIB::entPhysicalDescr[1100006000] = STRING: Sensor Container

arista1#sh snmp mib translate entPhysicalDescr
.1.3.6.1.2.1.47.1.1.1.1.2

arista1#sh snmp mib walk entPhySensorValue | grep 10000600
ENTITY-SENSOR-MIB::entPhySensorValue[100006001] = INTEGER: 340
ENTITY-SENSOR-MIB::entPhySensorValue[100006002] = INTEGER: 370
ENTITY-SENSOR-MIB::entPhySensorValue[100006003] = INTEGER: 370
ENTITY-SENSOR-MIB::entPhySensorValue[100006004] = INTEGER: 370
ENTITY-SENSOR-MIB::entPhySensorValue[100006005] = INTEGER: 310
ENTITY-SENSOR-MIB::entPhySensorValue[100006006] = INTEGER: 266
ENTITY-SENSOR-MIB::entPhySensorValue[100006007] = INTEGER: 250
ENTITY-SENSOR-MIB::entPhySensorValue[100006008] = INTEGER: 320
ENTITY-SENSOR-MIB::entPhySensorValue[100006009] = INTEGER: 320

arista1#sh snmp mib translate entPhySensorValue
.1.3.6.1.2.1.99.1.1.1.4

#+END_SRC

* timetick and uptime

- seconds * 100 issue
- to ~497 days
- https://arista.my.site.com/AristaCommunity/s/article/Monitoring-System-Uptime-via-SNMP
  - This article provides a way to set up a custom OID with datatype as a 64-bit unsigned integer (Counter64) to use for system uptime. Counter64 will give us ~5.8 billion years before showing a garbled value.
- SNMPv2-MIB::sysUpTime (.1.3.6.1.2.1.1.3.0)
- RFC3418 defines SNMPv2-MIB::sysUpTime (.1.3.6.1.2.1.1.3.0)
- https://www.circitor.fr/Mibs/Html/D/DISMAN-EVENT-MIB.php#sysUpTimeInstance

#+BEGIN_SRC 
arista1#show snmp mib get SNMPv2-MIB::sysUpTime.0
DISMAN-EVENT-MIB::sysUpTimeInstance = Timeticks: (8842543) 1 day, 0:33:45.43

#+END_SRC

#+BEGIN_SRC 
arista1#show snmp mib translate DISMAN-EVENT-MIB::sysUpTimeInstance
.1.3.6.1.2.1.1.3.0

#+END_SRC

- https://kb.paessler.com/en/topic/61249-why-does-the-snmp-system-uptime-sensor-report-wrong-values
  - Wrong uptime values because of 32-bit counters

** uptime called sysUpTime

https://datatracker.ietf.org/doc/html/rfc3418

#+BEGIN_SRC 
 102:           sysUpTime OBJECT-TYPE
 103:               SYNTAX  TimeTicks
 104:               ACCESS  read-only
 105:               STATUS  mandatory
 106:               DESCRIPTION
 107:                       "The time (in hundredths of a second) since the
 108:                       network management portion of the system was last
 109:                       re-initialized."
 110:               ::= { system 3 }
#+END_SRC

** timetick

https://datatracker.ietf.org/doc/html/rfc2578

#+BEGIN_SRC 
7.1.8.  TimeTicks

   The TimeTicks type represents a non-negative integer which represents
   the time, modulo 2^32 (4294967296 decimal), in hundredths of a second
   between two epochs.  When objects are defined which use this ASN.1
   type, the description of the object identifies both of the reference
   epochs.

   For example, [3] defines the TimeStamp textual convention which is
   based on the TimeTicks type.  With a TimeStamp, the first reference
   epoch is defined as the time when sysUpTime [5] was zero, and the
   second reference epoch is defined as the current value of sysUpTime.

   The TimeTicks type may not be sub-typed.

#+END_SRC

#+BEGIN_SRC 
        ObjectSyntax       DEFVAL clause
        ----------------   ------------
        Integer32          DEFVAL { 1 }
                           -- same for Gauge32, TimeTicks, Unsigned32
#+END_SRC

** integer32

#+BEGIN_SRC 
7.1.1.  Integer32 and INTEGER

   The Integer32 type represents integer-valued information between
   -2^31 and 2^31-1 inclusive (-2147483648 to 2147483647 decimal).  This
   type is indistinguishable from the INTEGER type.  Both the INTEGER
   and Integer32 types may be sub-typed to be more constrained than the
   Integer32 type.

   The INTEGER type (but not the Integer32 type) may also be used to
   represent integer-valued information as named-number enumerations.
   In this case, only those named-numbers so enumerated may be present
   as a value.  Note that although it is recommended that enumerated
   values start at 1 and be numbered contiguously, any valid value for
   Integer32 is allowed for an enumerated value and, further, enumerated
   values needn't be contiguously assigned.

   Finally, a label for a named-number enumeration must consist of one
   or more letters or digits, up to a maximum of 64 characters, and the
   initial character must be a lower-case letter.  (However, labels
   longer than 32 characters are not recommended.)  Note that hyphens
   are not allowed by this specification (except for use by information
   modules converted from SMIv1 which did allow hyphens).

#+END_SRC

** counter64

https://datatracker.ietf.org/doc/html/rfc2856

#+BEGIN_SRC 
-- for counters that wrap in less than one hour with only 32 bits
Counter64 ::=
    [APPLICATION 6]
        IMPLICIT INTEGER (0..18446744073709551615)

#+END_SRC

** sysUpTime vs hrSystemUptime

https://kb.paessler.com/en/topic/61249-why-does-the-snmp-system-uptime-sensor-report-wrong-values

This is per the requirements of the sysUpTime (as found in e.g. RFC 1213), which are that it reflects the uptime of the SNMP Agent, not that of the managed entity itself.

In contrast, hrSystemUptime is supposed to reflect the actual system uptime.
