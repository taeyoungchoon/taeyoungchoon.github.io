* DONE free, recently

- https://serverfault.com/questions/85470/meaning-of-the-buffers-cache-line-in-the-output-of-free
- https://www.linuxatemyram.com/
- https://www.gnutoolbox.com/linux-free-command/
- [X]  https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=34e431b0ae398fc54ea69ff85ec700722c9da773

#+BEGIN_SRC bash
-bash-4.2# free -w -h --si
              total        used        free      shared     buffers       cache   available
Mem:           2.0G        757M         47M        181M        170M        983M        949M
Swap:            0B          0B          0B
#+END_SRC

total = 2000
used = 757
free = 47
shared = 181
buffers  = 170 
cache = 983        
available = 949

In [8]: free + buffers + cache
Out[8]: 1200

In [9]: available
Out[9]: 949

#+BEGIN_SRC 
-bash-4.2# free -w -m
              total        used        free      shared     buffers       cache   available
Mem:           1959         757          47         181         170         983         949
Swap:             0           0           0
#+END_SRC

total = 1959
used = 757
free = 47
shared = 181
buffers  = 170 
cache = 983        
available = 949

* TODO dig in available

- [X]  https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=34e431b0ae398fc54ea69ff85ec700722c9da773
- Currently, the amount of memory that is available for a new workload,
without pushing the system into swap, can be estimated from MemFree,
Active(file), Inactive(file), and SReclaimable, as well as the "low"
watermarks from /proc/zoneinfo.
- https://www.kernel.org/doc/gorman/html/understand/understand005.htlm
- zone, watermark
  - bank > node > zone
    - ZONE_HIGIMEM
    - ZONE_NORMAL
    - ZONE_DMA
  - struct zone_struct
- watermark
  - pages_low
  - pages_min
  - pages_high
- https://www.halolinux.us/kernel-architecture/calculation-of-zone-watermarks.html


#+BEGIN_SRC 
 diff --git a/fs/proc/meminfo.c b/fs/proc/meminfo.c
index a77d2b2991998..24270eceddbff 100644
--- a/fs/proc/meminfo.c
+++ b/fs/proc/meminfo.c
 
 /*
@@ -47,12 +51,44 @@ static int meminfo_proc_show(struct seq_file *m, void *v)
 	for (lru = LRU_BASE; lru < NR_LRU_LISTS; lru++)
 		pages[lru] = global_page_state(NR_LRU_BASE + lru);
 
+	for_each_zone(zone)
+		wmark_low += zone->watermark[WMARK_LOW];
+
+	/*
+	 * Estimate the amount of memory available for userspace allocations,
+	 * without causing swapping.
+	 *
+	 * Free memory cannot be taken below the low watermark, before the
+	 * system starts swapping.
+	 */
+	available = i.freeram - wmark_low;
+
+	/*
+	 * Not all the page cache can be freed, otherwise the system will
+	 * start swapping. Assume at least half of the page cache, or the
+	 * low watermark worth of cache, needs to stay.
+	 */
+	pagecache = pages[LRU_ACTIVE_FILE] + pages[LRU_INACTIVE_FILE];
+	pagecache -= min(pagecache / 2, wmark_low);
+	available += pagecache;
+
+	/*
+	 * Part of the reclaimable swap consists of items that are in use,
+	 * and cannot be freed. Cap this estimate at the low watermark.
+	 */
+	available += global_page_state(NR_SLAB_RECLAIMABLE) -
+		     min(global_page_state(NR_SLAB_RECLAIMABLE) / 2, wmark_low);
+
+	if (available < 0)
+		available = 0;
+
#+END_SRC
